---

## ‚úÖ Module 1 : **Gestion des utilisateurs et r√¥les dynamiques**

---

### 1. üéØ **Objectif fonctionnel**

Permettre l‚Äôenregistrement, l‚Äôauthentification, l‚Äôattribution, la gestion et le contr√¥le des utilisateurs de l‚Äô√©tablissement selon des r√¥les pr√©cis (enseignant, principal, censeur‚Ä¶), avec une gestion **granulaire des permissions** par fonctionnalit√© (ex : voir / modifier / ajouter / supprimer) et la possibilit√© de cr√©er des **r√¥les personnalis√©s**.

---

### 2. üë• **Acteurs concern√©s**

* **Superadmin** : acc√®s total √† tous les r√¥les et fonctions
* **Administrateurs de l‚Äô√©tablissement** : principal, censeur hi√©rarchique, √©conome
* **Enseignants**
* **Surveillants g√©n√©raux et de secteur**
* **Parents**
* **Apprenants (√©l√®ves)**
* **Agents d‚Äôentretien**
* **Utilisateurs personnalis√©s (ex : stagiaires, d√©veloppeurs, gestionnaires temporaires)**

---

### 3. üß© **Fonctionnalit√©s d√©taill√©es**

#### A. Cr√©ation d‚Äôun compte utilisateur

* Via formulaire admin (Superadmin / Principal)
* Via import Excel/CSV (apprenants, parents, enseignants)

#### B. Authentification

* Par login/mot de passe
* Double authentification possible (email/SMS pour profils sensibles)
* Jetons d‚Äôacc√®s (JWT) avec r√¥les inclus

#### C. Attribution d‚Äôun ou plusieurs r√¥les

* R√¥le principal (ex : enseignant)
* R√¥les suppl√©mentaires (ex : enseignant + surveillant g√©n√©ral)

#### D. D√©finition des permissions par r√¥le

Pour chaque fonctionnalit√© (ex : gestion des notes) :

* `peut_voir` ‚úÖ
* `peut_ajouter` ‚ûï
* `peut_modifier` ‚úèÔ∏è
* `peut_supprimer` ‚ùå

> Exemple : un enseignant stagiaire peut seulement voir ses notes, un titulaire peut les modifier.

#### E. Cr√©ation de **r√¥les personnalis√©s**

* Ex : ‚Äúgestionnaire de biblioth√®que‚Äù, ‚Äúsuperviseur des repas‚Äù
* Chaque r√¥le est mapp√© √† un ensemble de **permissions** sur les modules fonctionnels

#### F. Modification de r√¥les

* Seuls les administrateurs peuvent modifier ou retirer un r√¥le
* Journalisation des modifications de r√¥les

#### G. Historique d‚Äôacc√®s

* Toutes les connexions sont enregistr√©es (date, IP, navigateur)
* Visualisable par administrateurs

---

### 4. üîÅ **√âtats et transitions**

| √âtat     | Description                                          |
| -------- | ---------------------------------------------------- |
| Inactif  | Compte cr√©√© mais non activ√©                          |
| Actif    | Compte utilisable (acc√®s √† l‚Äôinterface)              |
| Suspendu | D√©sactiv√© temporairement par l‚Äôadmin                 |
| Archiv√©  | Utilisateur supprim√© logiquement (ex : ancien √©l√®ve) |

---

### 5. üß† **Contraintes m√©tier**

* Un utilisateur peut avoir **plusieurs r√¥les** simultan√©s.
* Un r√¥le peut √™tre **restreint √† certaines classes ou services** (ex : enseignant CM2 uniquement).
* Certains r√¥les (ex : `superadmin`) **ne peuvent pas √™tre modifi√©s** sauf par le superadmin.
* **Audit obligatoire** de chaque action li√©e aux utilisateurs et r√¥les.

---

### 6. üñ•Ô∏è **Interfaces attendues**

#### ‚úÖ Backoffice (Web Admin)

* Tableau de gestion des utilisateurs
* Formulaire d‚Äôajout / √©dition
* Gestion dynamique des r√¥les et permissions
* Vue des connexions r√©centes
* Historique des modifications de r√¥les

#### ‚úÖ Front Utilisateur (Web + Mobile)

* Page de login
* Tableau de bord utilisateur selon permissions
* Menu dynamique (affiche uniquement les modules accessibles)

---

### 7. üßæ **Mod√®le de donn√©es associ√© (extrait SQL simplifi√©)**

```sql
CREATE TABLE etablissements (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(150) NOT NULL,
  code VARCHAR(20) UNIQUE,
  type VARCHAR(50), -- Ex : √âcole primaire, Coll√®ge, Lyc√©e, Universit√©
  adresse TEXT,
  telephone VARCHAR(20),
  email VARCHAR(100),
  directeur VARCHAR(100),
  site_web VARCHAR(100),
  logo_url TEXT,
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE utilisateurs (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100),
  prenom VARCHAR(100),
  email VARCHAR(150) UNIQUE NOT NULL,
  mot_de_passe TEXT NOT NULL,
  telephone VARCHAR(30),
  statut statut_utilisateur DEFAULT 'inactif',
  date_creation TIMESTAMP DEFAULT NOW(),
  etablissement_id INTEGER REFERENCES etablissements(id)
);

CREATE TABLE roles (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100) UNIQUE NOT NULL,
  description TEXT,
  etablissement_id INTEGER REFERENCES etablissements(id)
);

CREATE TABLE permissions (
  id SERIAL PRIMARY KEY,
  fonctionnalite VARCHAR(100),
  peut_voir BOOLEAN DEFAULT FALSE,
  peut_ajouter BOOLEAN DEFAULT FALSE,
  peut_modifier BOOLEAN DEFAULT FALSE,
  peut_supprimer BOOLEAN DEFAULT FALSE,
  etablissement_id INTEGER REFERENCES etablissements(id)
);

CREATE TABLE utilisateur_roles (
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  role_id INTEGER REFERENCES roles(id),
  etablissement_id INTEGER REFERENCES etablissements(id),
  PRIMARY KEY (utilisateur_id, role_id)
);

CREATE TABLE role_permissions (
  role_id INTEGER REFERENCES roles(id),
  permission_id INTEGER REFERENCES permissions(id),
  etablissement_id INTEGER REFERENCES etablissements(id),
  PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE logs_connexions (
  id SERIAL PRIMARY KEY,
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  date_connexion TIMESTAMP DEFAULT NOW(),
  ip_connexion VARCHAR(50),
  user_agent TEXT,
  etablissement_id INTEGER REFERENCES etablissements(id)
);

CREATE TABLE roles_personnalises (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100) UNIQUE NOT NULL,
  description TEXT,
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT NOW(),
  etablissement_id INTEGER REFERENCES etablissements(id)
);

CREATE TABLE role_personnalise_permissions (
  role_id INTEGER REFERENCES roles_personnalises(id),
  permission_id INTEGER REFERENCES permissions(id),
  etablissement_id INTEGER REFERENCES etablissements(id),
  PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE utilisateur_role_personnalise (
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  role_id INTEGER REFERENCES roles_personnalises(id),
  etablissement_id INTEGER REFERENCES etablissements(id),
  PRIMARY KEY (utilisateur_id, role_id)
);


```

---

### 8. ‚úÖ **Cas d‚Äôusage concrets**

#### Cas 1 ‚Äì Cr√©ation d‚Äôun enseignant stagiaire

* Admin cr√©e un compte utilisateur
* Lui attribue le r√¥le ‚Äúenseignant‚Äù
* Restreint ses permissions √† `peut_voir` sur ‚Äúnotes‚Äù

#### Cas 2 ‚Äì Ajout d‚Äôun personnel polyvalent

* Un agent est enseignant + surveillant
* Deux r√¥les sont attribu√©s avec des permissions distinctes
* Les modules visibles dans le menu sont la fusion des permissions

#### Cas 3 ‚Äì Demande de modification d‚Äôun r√¥le

* Un enseignant demande √† modifier ses droits pour √©diter les notes
* Une notification est envoy√©e √† l‚Äôadmin
* Apr√®s approbation, l‚Äôadmin met √† jour les permissions

---

II II II II








# üßë‚Äçüéì **MODULE 2 : GESTION DES APPRENANTS (√âL√àVES)**

---

## üéØ **Objectif g√©n√©ral**

Permettre l‚Äôenregistrement, le suivi complet et l‚Äô√©volution acad√©mique, administrative et financi√®re de chaque **apprenant**, depuis son admission jusqu‚Äô√† sa sortie d√©finitive. Ce module est central au syst√®me, car il alimente les autres modules (notes, paiements, emplois du temps, bulletins, disciplines, transport, etc.).

---

## üß© **Sous-fonctionnalit√©s**

---

### 1. üìù **Inscription / Admission des apprenants**

* **Champs obligatoires √† la cr√©ation** :

  * Nom(s), pr√©nom(s)
  * Sexe
  * Date et lieu de naissance
  * Nationalit√©
  * Photo d‚Äôidentit√©
  * Nom(s) et contacts du ou des parents/responsables
  * Adresse, t√©l√©phone, email du responsable l√©gal
  * Classe demand√©e
  * Ann√©e scolaire d‚Äôinscription
  * Num√©ro matricule (g√©n√©r√© automatiquement ou saisi manuellement, selon config)
  * Num√©ro d‚Äôacte de naissance (facultatif)
  * Situation m√©dicale (facultatif)
  * Documents justificatifs en pi√®ces jointes (PDF, images)

* **Options suppl√©mentaires** :

  * Type d‚Äô√©l√®ve : **Interne / Externe / Demi-pensionnaire**
  * Transport scolaire : Oui / Non (lien avec module transport)
  * Cantine scolaire : Oui / Non
  * Bourse : Oui / Non (pr√©ciser le montant)

* **Workflow** :

  * Demande d‚Äôadmission
  * Validation par l‚Äôadministration
  * G√©n√©ration automatique du matricule si activ√©
  * Cr√©ation du compte √©l√®ve + acc√®s parent (via portail web ou app mobile)

---

### 2. üßæ **Dossier acad√©mique de l‚Äôapprenant**

* **Historique des classes fr√©quent√©es** par ann√©e acad√©mique
* Moyennes par s√©quence et par trimestre
* Bulletins g√©n√©r√©s
* Examens pr√©sent√©s
* Mentions obtenues
* Changement de classe (passage, redoublement, r√©orientation)

---

### 3. üí≥ **Dossier financier**

* Historique des frais de scolarit√© pay√©s
* Historique des frais annexes (transport, cantine, examens‚Ä¶)
* Soldes dus / trop-per√ßus
* √âch√©ancier personnalis√©
* Statut : En r√®gle / En retard / Exon√©r√© / Boursier

---

### 4. üë™ **Lien avec les parents/responsables**

* Un ou plusieurs responsables par apprenant
* Chaque responsable a :

  * Un compte d‚Äôacc√®s s√©curis√©
  * Des droits limit√©s (consulter les notes, bulletins, messages, paiements, etc.)
  * Peut contacter les enseignants ou la direction

---

### 5. ‚öôÔ∏è **Fonctions administratives suppl√©mentaires**

* Changement de classe (interne)
* R√©affectation √† un autre √©tablissement (inter-√©coles)
* D√©sactivation / Archivage automatique en fin d‚Äôann√©e
* Suppression logique (jamais de suppression physique sans autorisation sp√©ciale)
* R√©inscription rapide l‚Äôann√©e suivante

---

### 6. üìä **Statistiques & filtres**

* R√©partition par sexe, √¢ge, niveau
* Nombre d‚Äô√©l√®ves par classe, niveau, s√©rie
* Nombre d‚Äôinternes / externes
* Statistiques de performance par p√©riode
* Tableau de bord des effectifs

---

## üîí **S√©curit√© & Confidentialit√©**

* Acc√®s au module restreint aux r√¥les autoris√©s : Admin, Principal, Responsable scolarit√©, Secr√©tariat, Responsable financier
* Tra√ßabilit√© compl√®te de chaque modification (log des changements)
* Pi√®ces jointes crypt√©es si donn√©es sensibles

---

## üîÅ **Int√©grations natives**

* **Module Notes & Examens** : chaque apprenant est li√© √† ses copies, r√©sultats et bulletins
* **Module Finances** : suivi des paiements par apprenant
* **Module Parents / Portail Famille** : notifications automatiques
* **Module Emploi du temps** : association de l‚Äô√©l√®ve √† un groupe horaire
* **Module Discipline** : enregistrement des sanctions et retards
* **Module Transport** : attribution √† un bus et itin√©raire
* **Module Cantine** : liste des repas consomm√©s

---

## üßæ **Mod√®le de donn√©es simplifi√© (SQL)**

```sql
CREATE TABLE apprenants (
  id SERIAL PRIMARY KEY,
  matricule VARCHAR(30) UNIQUE NOT NULL,
  nom VARCHAR(100) NOT NULL,
  prenom VARCHAR(100),
  date_naissance DATE NOT NULL,
  lieu_naissance VARCHAR(100),
  sexe VARCHAR(10) CHECK (sexe IN ('Masculin', 'F√©minin')),
  nationalite VARCHAR(50),
  type_apprenant VARCHAR(30), -- Interne / Externe / Demi-pensionnaire
  situation_medicale TEXT,
  statut_inscription VARCHAR(30) DEFAULT 'Inscrit',
  classe_actuelle_id INTEGER REFERENCES classes(id),
  annee_scolaire_id INTEGER REFERENCES annees_academiques(id),
  photo_url TEXT,
  cree_le TIMESTAMP DEFAULT NOW()
);
```

---

## üñ•Ô∏è **Interfaces attendues (Web & App)**

### Admin :

* Tableau de bord des apprenants
* Formulaire de cr√©ation/√©dition
* Filtres par classe / sexe / statut
* Actions group√©es : r√©inscription, changement de classe

### Parent :

* Profil de l‚Äôapprenant
* Notes, bulletins, absences
* Paiements
* Messagerie

---

## ‚úÖ Cas d‚Äôusage typiques

| Cas d'usage                 | Description                                                                     |
| --------------------------- | ------------------------------------------------------------------------------- |
| Admission d‚Äôun nouvel √©l√®ve | Cr√©ation depuis le backoffice, enregistrement des pi√®ces, attribution du num√©ro |
| R√©inscription               | L'√©l√®ve garde son matricule, changement d‚Äôann√©e et classe automatique           |
| Suivi acad√©mique            | Visualisation des notes et moyennes                                             |
| Mise √† jour du profil       | Ajout d‚Äôun responsable secondaire, changement de photo, etc.                    |



---

# üè´ **MODULE 3 : GESTION DES CLASSES ET NIVEAUX SCOLAIRES**

---

## üéØ **Objectif g√©n√©ral**

Permettre la cr√©ation, l‚Äôorganisation, la hi√©rarchisation et la gestion dynamique des **niveaux scolaires**, **classes**, **groupes p√©dagogiques**, et leur liaison avec les enseignants, mati√®res, emplois du temps, apprenants, et cycles √©ducatifs.

Ce module est fondamental car il d√©finit la structure acad√©mique de l‚Äô√©tablissement et conditionne la majorit√© des autres modules (notes, emplois du temps, affectation des √©l√®ves, enseignants, bulletins‚Ä¶).

---

## üß© **Sous-fonctionnalit√©s**

---

### 1. üéì **Gestion des cycles et niveaux scolaires**

* **Cycles configurables** (Maternelle, Primaire, Coll√®ge, Lyc√©e, Sup√©rieur‚Ä¶)
* **Niveaux par cycle** : ex. CP, CE1, 6√®me, Terminale, etc.
* **Attributs des niveaux** :

  * Nom court et long
  * Ordre p√©dagogique (rang de hi√©rarchie)
  * √Çge moyen conseill√©
  * Type (examen ou non)
  * Langue d‚Äôenseignement
  * Dur√©e acad√©mique (annuelle, semestrielle‚Ä¶)

---

### 2. üè∑Ô∏è **Cr√©ation et gestion des classes**

* Une **classe** est une instance d‚Äôun niveau donn√©e dans une ann√©e acad√©mique.
* **Champs √† d√©finir** :

  * Nom de la classe (ex. 5√®me A, Terminale S1)
  * Niveau associ√© (ex. Terminale)
  * Ann√©e acad√©mique
  * Effectif pr√©vu
  * Effectif maximum (optionnel)
  * Cycle (auto-renseign√© depuis le niveau)
  * S√©rie (ex : A, C, D, TI, H√¥tellerie...)
  * Enseignant principal (responsable de classe)
  * Statut : Active / Ferm√©e
  * Salle attribu√©e (li√©e au module infrastructure)
  * Section bilingue ou non
  * Description ou commentaire

---

### 3. üë• **Affectation des apprenants**

* Affectation manuelle ou en masse d‚Äô√©l√®ves √† une classe
* Transfert d‚Äôune classe √† une autre (avec historique)
* Blocage des affectations apr√®s une p√©riode d√©finie

---

### 4. üßë‚Äçüè´ **Affectation des enseignants**

* Attribution d‚Äôun **enseignant principal** √† chaque classe
* Attribution des **enseignants de mati√®res** par classe
* Historique des affectations par ann√©e scolaire

---

### 5. üóìÔ∏è **P√©riodes acad√©miques et unit√©s p√©dagogiques**

* D√©finir les **6 s√©quences** (ou plus selon le pays) par an
* D√©finir les **trimestres** (g√©n√©ralement 3)
* Lier les s√©quences aux trimestres
* P√©riodes param√©trables (dates de d√©but et de fin)
* Statut : En cours / Ferm√© / En attente
* Utilis√©es dans les calculs de moyennes

---

### 6. üß™ **D√©finition des mati√®res par niveau**

* Chaque niveau a une liste de mati√®res obligatoires
* Pour chaque mati√®re :

  * Coefficient
  * Nom multilingue
  * Type : Tronc commun / Option / Sp√©cialit√©
  * Langue d‚Äôenseignement
  * Enseignant(s) affect√©(s)
  * Mati√®re √† examen (Oui/Non)

---

## üîó **Relations avec les autres modules**

* **Apprenants** : chaque apprenant est affect√© √† une classe (par niveau)
* **Notes** : notes li√©es √† l‚Äôann√©e, la classe, la mati√®re, la s√©quence
* **Bulletins** : g√©n√©r√©s pour chaque apprenant par classe et p√©riode
* **Emploi du temps** : d√©fini par classe
* **Moyennes** : calcul√©es par s√©quence et par trimestre, puis cumul√©es
* **Finances** : tarifs scolaires peuvent varier par niveau
* **Salles** : chaque classe peut avoir une salle par d√©faut

---

## üîí **S√©curit√© & contr√¥le d‚Äôacc√®s**

* Gestion limit√©e aux utilisateurs avec r√¥le **administrateur**, **responsable p√©dagogique** ou **directeur**
* Audit de chaque cr√©ation, modification ou suppression de classe
* Impossible de supprimer une classe li√©e √† des notes ou bulletins

---

## üìä **Interfaces attendues (Web / Mobile Admin)**

* Liste des classes et niveaux avec filtres :

  * Par ann√©e scolaire
  * Par cycle
  * Par statut
* Formulaire de cr√©ation/√©dition d‚Äôune classe
* Vue d√©taill√©e d‚Äôune classe (√©l√®ves, enseignants, mati√®res)
* Import / Export (Excel ou PDF)

---

## üßæ **Mod√®le de donn√©es simplifi√© (SQL)**

```sql
CREATE TABLE niveaux (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(50) UNIQUE NOT NULL,
  cycle VARCHAR(50),
  rang_pedagogique INTEGER,
  langue_enseignement VARCHAR(30),
  duree_academique VARCHAR(30),
  is_examen BOOLEAN DEFAULT FALSE
);

CREATE TABLE classes (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(50) NOT NULL,
  niveau_id INTEGER REFERENCES niveaux(id),
  annee_scolaire_id INTEGER REFERENCES annees_academiques(id),
  enseignant_principal_id INTEGER REFERENCES utilisateurs(id),
  serie VARCHAR(30),
  effectif_max INTEGER,
  salle_id INTEGER REFERENCES salles(id),
  statut VARCHAR(20) DEFAULT 'Active',
  UNIQUE(nom, annee_scolaire_id)
);
```

---

## ‚úÖ Cas d‚Äôusage typiques

| Cas d'usage                                            | Description                                                         |
| ------------------------------------------------------ | ------------------------------------------------------------------- |
| Cr√©ation d‚Äôune classe de Terminale C pour 2024‚Äì2025    | Choix du niveau ¬´ Terminale ¬ª, s√©rie C, affectation d‚Äôun enseignant |
| Affectation des mati√®res obligatoires                  | Pour chaque niveau, liste des disciplines                           |
| Suivi de l‚Äôeffectif par classe                         | Affichage et √©dition du nombre d‚Äô√©l√®ves                             |
| R√©cup√©ration des classes pour notes ou emploi du temps | Vue utilis√©e par les autres modules                                 |

---

## üìé Notes suppl√©mentaires

* Pr√©voir une option de **duplication de configuration de l‚Äôann√©e pr√©c√©dente**
* Chaque ann√©e scolaire doit permettre une structure autonome
* Envisager des **groupes de niveau ou sous-classes** (pour les groupes modulaires)


Parfait‚ÄØ! Voici la **fiche technique compl√®te** et **d√©taill√©e** du **Module 4 : Gestion des mati√®res, enseignants et emplois du temps**, √† destination directe d‚Äôune √©quipe de d√©veloppement. Elle fait partie int√©grante du cahier de charges de votre syst√®me de gestion scolaire complet.

---

# üìò **MODULE 4 : Gestion des mati√®res, enseignants et emplois du temps**

---

## üéØ **Objectif g√©n√©ral**

Ce module vise √† organiser l‚Äôensemble des **mati√®res enseign√©es**, les **enseignants affect√©s**, et √† planifier les **emplois du temps** de mani√®re automatis√©e et centralis√©e. Il permet de g√©rer la r√©partition horaire, les salles, les cours hebdomadaires, et les enseignements optionnels par classe ou groupe p√©dagogique.

---

## üß© **Composants fonctionnels du module**

---

### 1. üìö **Gestion des mati√®res (disciplines scolaires)**

#### a. Cr√©ation et configuration

* **Champs obligatoires** :

  * `nom` : Libell√© de la mati√®re (ex: Math√©matiques)
  * `code` : Identifiant court et unique (ex: MATH)
  * `langue_d_enseignement`
  * `niveau_id` : niveau auquel est rattach√©e la mati√®re
  * `coefficient` : utilis√© pour les calculs de moyennes
  * `type` : tronc commun / sp√©cialit√© / optionnel
  * `est_a_examen` : bool√©en (true si √©valu√©e √† l'examen)
  * `est_active` : permet de d√©sactiver temporairement

#### b. Relations

* Une mati√®re peut √™tre commune √† plusieurs niveaux (via table de liaison `niveau_matiere`)
* Une mati√®re peut √™tre enseign√©e par plusieurs enseignants

#### c. Multilingue

* Nom affich√© dans plusieurs langues pour interface bilingue

---

### 2. üë©‚Äçüè´ **Gestion des enseignants**

#### a. Informations g√©n√©rales

* Identit√© compl√®te (nom, pr√©nom, contacts)
* Sp√©cialit√© disciplinaire
* Statut : permanent / vacataire / contractuel
* Langue d‚Äôenseignement
* Disponibilit√©s (cr√©neaux horaires de la semaine)

#### b. Affectation p√©dagogique

* Un enseignant peut √™tre :

  * Responsable d‚Äôune classe
  * Affect√© √† une ou plusieurs mati√®res pour une ou plusieurs classes
* Historique des affectations
* Affectation par ann√©e scolaire

#### c. Contr√¥le

* Ne peut enseigner une mati√®re que si compatible avec sa sp√©cialit√©
* Interface d‚Äôadministration pour r√©affectation ou remplacement

---

### 3. üóìÔ∏è **Planification des cours & emploi du temps**

#### a. Cr√©ation des **cr√©neaux horaires types**

* Plages horaires configurables :

  * Exemple : 7h30‚Äì8h20, 8h20‚Äì9h10, pause, etc.
  * Jours actifs (lundi au samedi)
* D√©finir :

  * Heure de d√©but et de fin
  * Dur√©e
  * Pauses autoris√©es

#### b. Planification manuelle ou assist√©e

* Planification **manuelle** par drag & drop (web admin)
* Planification **semi-automatique** avec suggestion intelligente :

  * Respect des contraintes de disponibilit√©
  * √âvitement de chevauchement (enseignant, salle, classe)
  * Respect du volume horaire hebdomadaire
* Possibilit√© de verrouiller une plage une fois valid√©e

#### c. Liaison avec le calendrier

* Syst√®me de calendrier visuel :

  * Vue par classe
  * Vue par enseignant
  * Vue par salle
* Impression PDF ou export Excel

#### d. Types de cours

* Cours normal (r√©current)
* Cours sp√©cial (remplacement, s√©minaire‚Ä¶)
* Salles virtuelles (dans le cas d‚Äôun enseignement hybride)

---

### 4. üìä **Suivi et volumes horaires**

* Suivi du volume d‚Äôheures dispens√©es par mati√®re
* Comparaison heures pr√©vues vs heures r√©alis√©es
* Alertes si un enseignant d√©passe ou n‚Äôatteint pas ses heures

---

## üîê **Contr√¥le d‚Äôacc√®s et s√©curit√©**

| R√¥le                    | Acc√®s                            |
| ----------------------- | -------------------------------- |
| Administrateur          | Total                            |
| Responsable p√©dagogique | Planification                    |
| Enseignant              | Consultation                     |
| √âl√®ve / Parent          | Consultation (classe uniquement) |

---

## üìé **Exemples d‚ÄôUI attendues**

* Interface dynamique d'emploi du temps (drag & drop)
* Formulaire d‚Äôajout d‚Äôune mati√®re par niveau
* Liste des enseignants par mati√®re
* Disponibilit√© visuelle des enseignants (calendrier)
* Export hebdomadaire des cours (PDF/Excel)
* Int√©gration d‚Äôun agenda personnel par enseignant

---

## üßæ **Mod√®le de donn√©es simplifi√© (SQL)**

```sql
CREATE TABLE matieres (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100) NOT NULL,
  code VARCHAR(10) UNIQUE NOT NULL,
  langue VARCHAR(20),
  coefficient INTEGER DEFAULT 1,
  type VARCHAR(30), -- Tronc commun, Option, Sp√©cialit√©
  est_a_examen BOOLEAN DEFAULT FALSE,
  est_active BOOLEAN DEFAULT TRUE
);

CREATE TABLE niveau_matiere (
  id SERIAL PRIMARY KEY,
  niveau_id INTEGER REFERENCES niveaux(id),
  matiere_id INTEGER REFERENCES matieres(id),
  UNIQUE(niveau_id, matiere_id)
);

CREATE TABLE enseignant_matiere (
  id SERIAL PRIMARY KEY,
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  matiere_id INTEGER REFERENCES matieres(id),
  niveau_id INTEGER REFERENCES niveaux(id),
  UNIQUE(utilisateur_id, matiere_id, niveau_id)
);

CREATE TABLE creneaux (
  id SERIAL PRIMARY KEY,
  jour_semaine VARCHAR(10), -- Lundi √† Samedi
  heure_debut TIME,
  heure_fin TIME
);

CREATE TABLE emplois_du_temps (
  id SERIAL PRIMARY KEY,
  classe_id INTEGER REFERENCES classes(id),
  matiere_id INTEGER REFERENCES matieres(id),
  enseignant_id INTEGER REFERENCES utilisateurs(id),
  creneau_id INTEGER REFERENCES creneaux(id),
  salle_id INTEGER REFERENCES salles(id),
  annee_scolaire_id INTEGER REFERENCES annees_academiques(id),
  UNIQUE(classe_id, creneau_id, jour_semaine)
);
```

---

## ‚úÖ **Cas d‚Äôusage typiques**

| Cas d‚Äôusage                                        | Description                                 |
| -------------------------------------------------- | ------------------------------------------- |
| Ajout d‚Äôune mati√®re de Physique pour Terminale C   | Coefficient 5, enseign√©e par Mr. Mbiandou   |
| Consultation de l‚Äôemploi du temps de 4√®me A        | Vue hebdomadaire des cours avec enseignants |
| Planification automatique des cours pour 6 classes | Optimisation selon les disponibilit√©s       |
| Modification manuelle d‚Äôun cr√©neau de Maths        | Changement de jour ou d‚Äôhoraire ponctuel    |
| Impression de l‚Äôemploi du temps d‚Äôun enseignant    | Planning personnel imprim√© ou export√©       |

---

Voici le **Module 5 : Gestion des bulletins et √©valuations**, r√©dig√© en version **d√©taill√©e**, claire et technique, √† int√©grer directement dans le cahier des charges complet de votre syst√®me de gestion scolaire.

---

# üìò **MODULE 5 : Gestion des bulletins et √©valuations**

---

## üéØ **Objectif g√©n√©ral**

Permettre la gestion compl√®te des **√©valuations des apprenants**, la **production automatique des bulletins**, le **calcul des moyennes s√©quentielles, trimestrielles et annuelles**, la **gestion des appr√©ciations**, ainsi que la **g√©n√©ration PDF** des bulletins individuels ou collectifs.

---

## üß© **Composants fonctionnels du module**

---

### 1. üìù **Gestion des s√©quences, trimestres et ann√©e acad√©mique**

* Une **ann√©e acad√©mique** contient :

  * 6 **s√©quences** (ex : S1 √† S6)
  * 3 **trimestres**, chacun compos√© de 2 s√©quences

    * Trimestre 1 : S1 + S2
    * Trimestre 2 : S3 + S4
    * Trimestre 3 : S5 + S6
* Chaque p√©riode est bien dat√©e :

  * `date_debut`, `date_fin`
  * Li√©e √† une `annee_academique_id`

---

### 2. üß™ **Saisie des √©valuations**

#### a. Notes s√©quentielles

* Pour chaque s√©quence, chaque enseignant saisit les notes des apprenants selon les mati√®res qu‚Äôil enseigne dans une classe.
* Types de notes :

  * Interrogation (coeff. 1)
  * Devoir maison (coeff. 1 ou 2)
  * Composition (coeff. 2 ou 3)
* Notes not√©es sur 20 (param√©trable)

#### b. Validation et verrouillage

* Une fois la s√©quence cl√¥tur√©e, la direction valide les notes et emp√™che leur modification.
* Les enseignants ne peuvent modifier les notes que pendant la p√©riode autoris√©e.

---

### 3. üìä **Calcul des moyennes**

#### a. Moyenne par mati√®re

* Moyenne s√©quentielle par mati√®re = somme pond√©r√©e des notes saisies / somme des coefficients.

#### b. Moyenne g√©n√©rale par √©l√®ve

* Moyenne s√©quentielle g√©n√©rale = somme (moyennes mati√®res √ó coefficients) / somme des coefficients.

#### c. Moyennes trimestrielles et annuelles

* Moyenne **trimestrielle** = moyenne arithm√©tique des deux s√©quences du trimestre concern√©.
* Moyenne **annuelle** = moyenne arithm√©tique de toutes les s√©quences.

---

### 4. üßæ **Gestion des bulletins**

#### a. √âlaboration automatique

* Calcul des rangs dans la classe (ordre d√©croissant de moyennes)
* Appr√©ciations automatiques (selon la moyenne)
* Observation libre ou standardis√©e
* Mention : Tr√®s Bien / Bien / Assez Bien / Passable / Faible (selon les seuils d√©finis)
* Discipline : absences, retards, comportement

#### b. Format et personnalisation

* Logo de l‚Äô√©cole
* Signature du responsable
* Choix de langue (FR/EN)
* Export **PDF individuel** ou **PDF en lot**
* Filtrage : par classe, par s√©quence, par √©l√®ve

---

### 5. üß† **Table des mentions et appr√©ciations**

* Table configurable :

  * Ex : Moyenne ‚â• 16 ‚Üí Tr√®s Bien
  * Ex : Moyenne entre 14‚Äì16 ‚Üí Bien
  * Possibilit√© d‚Äôajouter des commentaires dynamiques selon la performance globale

---

### 6. üîÑ **Historique & modifications**

* Historique des modifications de notes
* Journal d‚Äôaudit visible pour chaque √©valuation
* Interface de r√©vision (direction uniquement)

---

## üîê **Contr√¥le d‚Äôacc√®s**

| R√¥le                     | Droits                   |
| ------------------------ | ------------------------ |
| Enseignant               | Saisie des notes         |
| Chef d‚Äô√©tablissement     | Validation, √©dition      |
| Parent / √âl√®ve           | Lecture apr√®s validation |
| Surveillant / Secr√©taire | Impression / export PDF  |

---

## üóÑÔ∏è **Mod√®le de donn√©es SQL simplifi√©**

```sql
CREATE TABLE sequences (
  id SERIAL PRIMARY KEY,
  code VARCHAR(10) UNIQUE NOT NULL,
  nom VARCHAR(50),
  trimestre_id INTEGER REFERENCES trimestres(id),
  annee_academique_id INTEGER REFERENCES annees_academiques(id),
  date_debut DATE,
  date_fin DATE
);

CREATE TABLE bulletins (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  classe_id INTEGER REFERENCES classes(id),
  sequence_id INTEGER REFERENCES sequences(id),
  moyenne_generale NUMERIC(5,2),
  rang_classe INTEGER,
  mention VARCHAR(30),
  apprec_generale TEXT,
  absences INTEGER,
  retards INTEGER,
  comportement TEXT,
  statut_validation BOOLEAN DEFAULT FALSE,
  date_generation TIMESTAMP
);

CREATE TABLE evaluations (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  matiere_id INTEGER REFERENCES matieres(id),
  enseignant_id INTEGER REFERENCES utilisateurs(id),
  classe_id INTEGER REFERENCES classes(id),
  sequence_id INTEGER REFERENCES sequences(id),
  type_evaluation VARCHAR(30), -- interro, devoir, compo
  note NUMERIC(5,2) CHECK (note >= 0 AND note <= 20),
  coefficient INTEGER DEFAULT 1,
  date_saisie TIMESTAMP DEFAULT NOW()
);

CREATE TABLE appreciations (
  id SERIAL PRIMARY KEY,
  seuil_min NUMERIC(5,2),
  seuil_max NUMERIC(5,2),
  mention VARCHAR(20),
  apprec_automatique TEXT
);
```

---

## ‚úÖ **Cas d‚Äôusage typiques**

| Cas d‚Äôusage                                       | Description                                                 |
| ------------------------------------------------- | ----------------------------------------------------------- |
| Saisie des notes de S1 par un enseignant de maths | L‚Äôenseignant entre les notes pour chaque √©l√®ve de sa classe |
| Calcul de la moyenne trimestrielle T1             | Automatis√© √† partir des moyennes de S1 et S2                |
| G√©n√©ration du bulletin de Term C pour S3          | Export PDF avec notes, rang, appr√©ciation                   |
| Impression en lot des bulletins de 4e A           | Export group√© filtr√© par classe et s√©quence                 |
| Visualisation du rang de l‚Äô√©l√®ve                  | Accessible pour les parents et le personnel                 |

---

## üí° **Fonctionnalit√©s compl√©mentaires propos√©es**

* üìé Archivage annuel des bulletins
* üì§ Envoi par email des bulletins en PDF
* üì± Visualisation des notes sur l‚Äôappli mobile
* üìà Statistiques par niveau/mati√®re pour l‚Äôadministration

---

Voici la **fiche d√©taill√©e compl√®te** pour le :

---

# üìò **MODULE 6 : Gestion des pr√©sences et discipline**

---

## üéØ **Objectif g√©n√©ral**

Assurer un **suivi quotidien des pr√©sences**, **retards** et **comportements disciplinaires** des apprenants, tout en permettant une **tra√ßabilit√© centralis√©e**, une **visualisation claire** et des **notifications** automatiques aux parties concern√©es (parents, administration).

---

## üß© **Composants fonctionnels du module**

---

### 1. üè´ **Suivi de pr√©sence quotidienne**

#### a. **Pointage manuel ou digital**

* L'enseignant ou le surveillant peut effectuer l'appel via :

  * Interface web ou mobile
  * Codes couleurs : ‚úÖ Pr√©sent / ‚ùå Absent / ‚è∞ En retard / üõë Sortie anticip√©e

#### b. **Modes de pointage**

* Par **classe**, par **s√©ance**, par **jour**
* Int√©gration possible avec des **QR codes** ou **badges NFC/RFID** (en option)

#### c. **R√©currence**

* Saisie possible le matin et l‚Äôapr√®s-midi
* Historique par √©l√®ve sur toute l‚Äôann√©e

---

### 2. ‚è∞ **Retards et absences**

* Gestion des retards avec heure d‚Äôarriv√©e
* Justificatif d‚Äôabsence (commentaire, fichier attach√©)
* Classification :

  * Absence **justifi√©e / non justifi√©e**
  * Retard **l√©ger / grave**
* Alertes automatis√©es apr√®s X absences ou retards

---

### 3. üö® **Gestion disciplinaire**

#### a. **Comportements**

* D√©finition des types de comportements :

  * Positifs : entraide, participation active
  * N√©gatifs : bavardage, insolence, violence‚Ä¶
* Chaque comportement est :

  * Saisi par un responsable (enseignant, CPE, surveillant)
  * Dat√©, comment√©, class√© par gravit√©

#### b. **Sanctions et mesures**

* Types de sanctions param√©trables :

  * Avertissement, bl√¢me, exclusion temporaire, convocation des parents
* Historique par √©l√®ve
* G√©n√©ration de rapports disciplinaires

---

### 4. üìà **Visualisation & reporting**

* Fiches individuelles des apprenants :

  * Pr√©sences par jour, mois, ann√©e
  * R√©sum√© des incidents disciplinaires
* Statistiques par classe, mati√®re, enseignant
* Export PDF / Excel des relev√©s de pr√©sence ou incidents
* Tableau de bord avec alertes :

  * √âl√®ves √† probl√®me
  * Absence prolong√©e

---

### 5. üì§ **Notifications et communication**

* Envoi d‚Äô**emails / SMS** aux parents :

  * Absence du jour
  * Sanction enregistr√©e
* Messages internes au personnel :

  * √âvolution de la situation d‚Äôun √©l√®ve
* Liens directs vers le dossier de l‚Äô√©l√®ve concern√©

---

## üîê **Contr√¥le d‚Äôacc√®s**

| R√¥le            | Acc√®s                                               |
| --------------- | --------------------------------------------------- |
| Enseignant      | Pointage de sa classe, commentaires de comportement |
| Surveillant     | Pointage global, incidents disciplinaires           |
| Direction / CPE | Supervision, sanction, rapport complet              |
| Parent / √âl√®ve  | Visualisation de son historique uniquement          |

---

## üóÑÔ∏è **Mod√®le de donn√©es SQL simplifi√©**

```sql
CREATE TABLE presences (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  classe_id INTEGER REFERENCES classes(id),
  date_presence DATE NOT NULL,
  periode_jour VARCHAR(20) CHECK (periode_jour IN ('matin', 'apres-midi')),
  statut_presence VARCHAR(20) CHECK (statut_presence IN ('present', 'absent', 'retard', 'sortie')),
  heure_arrivee TIME,
  justification TEXT,
  enseignant_id INTEGER REFERENCES utilisateurs(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comportements (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  date_incident DATE NOT NULL,
  type_comportement VARCHAR(100),
  niveau_gravite VARCHAR(20) CHECK (niveau_gravite IN ('leger', 'moyen', 'grave')),
  description TEXT,
  enseignant_id INTEGER REFERENCES utilisateurs(id),
  statut_traitement VARCHAR(30) DEFAULT 'non trait√©',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sanctions (
  id SERIAL PRIMARY KEY,
  comportement_id INTEGER REFERENCES comportements(id),
  type_sanction VARCHAR(50),
  description TEXT,
  date_sanction DATE,
  duree_jours INTEGER,
  documents_justificatifs TEXT,
  personnel_id INTEGER REFERENCES utilisateurs(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## ‚úÖ **Cas d‚Äôusage typiques**

| Cas d‚Äôusage                    | Description                                              |
| ------------------------------ | -------------------------------------------------------- |
| Pointage du matin en 6e B      | Le professeur d‚Äôaccueil coche les absents et retards     |
| Alerte SMS √† un parent         | L‚Äô√©l√®ve est absent sans justification ‚Üí alerte imm√©diate |
| Saisie d‚Äôun incident           | L‚Äô√©l√®ve X insulte un enseignant ‚Üí comportement saisi     |
| Rapport mensuel des absences   | Export Excel des absences par classe                     |
| Fiche disciplinaire d‚Äôun √©l√®ve | Historique de tous les incidents et sanctions            |

---

## üí° **Fonctionnalit√©s avanc√©es propos√©es**

* üîÑ Int√©gration au bulletin trimestriel (absences, retards, discipline)
* üìÖ Corr√©lation avec l'emploi du temps pour v√©rifier les absences mati√®re par mati√®re
* üì∏ Ajout de fichiers justificatifs (image, PDF) pour absences
* üß† IA possible pour d√©tection automatique d‚Äô√©l√®ves √† risque

---

Voici le **Module 7 : Gestion financi√®re** d√©taill√©, tel qu‚Äôil doit √™tre d√©velopp√© dans le syst√®me de gestion scolaire. Ce module centralise la **gestion des flux financiers** de l‚Äô√©tablissement : scolarit√©, salaires, paiements en ligne, etc.

---

## üßæ **Module 7 : Gestion financi√®re**

---

### üîπ 1. **Gestion des frais de scolarit√©**

* **D√©finition des frais par classe et par ann√©e acad√©mique**

  * Frais de scolarit√© principaux (par classe, sous-syst√®me, fili√®re‚Ä¶)
  * Frais d'examen (pour classes d'examen uniquement)
  * Frais sp√©cifiques par √©l√®ve (au cas par cas)

* **P√©riodicit√© configurable**

  * Paiement unique ou en tranches (mensuel, trimestriel, semestriel)
  * Dates d‚Äô√©ch√©ance d√©finies par l‚Äôadministration

* **Syst√®me de remise**

  * Remises personnalis√©es (pour familles nombreuses, bourses‚Ä¶)
  * Historique et justification obligatoire

* **P√©nalit√©s de retard**

  * Pourcentage ou montant fixe d√©fini
  * Calcul automatique apr√®s d√©passement de la date limite

---

### üîπ 2. **Gestion des paiements**

* **M√©thodes de paiement autoris√©es :**

  * **Paiement manuel** : esp√®ces, ch√®ques
  * **Paiement en ligne** :

    * Orange Money
    * MTN Mobile Money
    * Int√©gration API bancaire (CB, virements)
    * Stripe / PayPal (optionnel)

* **Suivi des paiements**

  * Par √©l√®ve
  * Par p√©riode
  * Par mode de paiement
  * R√©capitulatif annuel et historique

* **Re√ßus t√©l√©chargeables** (PDF avec logo, signature)

* **Notifications**

  * Envoi automatique d‚Äôalertes de paiement
  * Rappels par email/SMS/notifications mobiles

---

### üîπ 3. **Gestion des salaires du personnel**

* **Cat√©gories de personnel**

  * Enseignants
  * Administration (principal, censeur, √©conome‚Ä¶)
  * Personnel d‚Äôentretien
  * Chauffeurs de bus
  * Personnel temporaire / stagiaires

* **Param√®tres du salaire**

  * Salaire fixe mensuel
  * Primes (heures suppl√©mentaires, prime de rendement‚Ä¶)
  * Retenues (absences non justifi√©es, avances‚Ä¶)

* **Historique des salaires**

  * Par employ√©
  * Par mois
  * Fiche de paie t√©l√©chargeable
  * Journalisation des versements et g√©n√©rateur d‚Äôattestation

* **Avances sur salaire**

  * Possibilit√© d‚Äôoctroi
  * D√©duction automatique des mois suivants
  * Historique des avances

---

### üîπ 4. **Gestion des frais suppl√©mentaires**

* **Frais ponctuels**

  * Excursions
  * Uniformes
  * Cotisations sp√©cifiques (photocopies, livres‚Ä¶)

* **Facturation rapide**

  * Par √©l√®ve, par classe ou globalement
  * Date limite de paiement personnalisable
  * Ajout de justificatifs

---

### üîπ 5. **Rapports et tableau de bord financier**

* **Tableaux de bord pour l‚Äô√©conome / administration**

  * Recettes par p√©riode
  * D√©penses par poste
  * √âtat des paiements par classe et globalement

* **Exports Excel/PDF**

  * Journaux comptables
  * Situation d‚Äôun √©l√®ve ou groupe d‚Äô√©l√®ves
  * Comptes-rendus mensuels

* **Pr√©visionnel budg√©taire**

  * Projection des recettes selon les inscriptions et √©ch√©anciers
  * Planification des d√©penses

* **√âquilibrage**

  * Comparaison automatique revenus / d√©penses
  * Alerte sur d√©s√©quilibres

---

### üîπ 6. **S√©curit√© & journalisation**

* **Tra√ßabilit√© de toutes les actions**

  * Qui a effectu√©/modifi√© un paiement, un salaire, etc.
  * Journal d‚Äôaudit complet par op√©ration

* **Acc√®s restreint par r√¥le**

  * √âconome, Principal : ajout / modification / suppression
  * Enseignant : uniquement consultation (dans certains cas)
  * Parent : uniquement ses paiements / re√ßus

---

### üîπ 7. **Int√©gration API (optionnel)**

* Endpoint Swagger pour :

  * R√©cup√©rer les √©tats de paiement
  * D√©clarer un paiement externe
  * Exporter les historiques

---

## üéì **Module 8 : Gestion des √©valuations, bulletins et notes**

---

### üéØ Objectif g√©n√©ral

G√©rer l‚Äôensemble du processus d‚Äô√©valuation acad√©mique (notes, moyennes, bulletins), en assurant la coh√©rence avec le d√©coupage acad√©mique (s√©quences, trimestres, ann√©e), tout en g√©n√©rant des bulletins structur√©s et exploitables avec statistiques p√©dagogiques.

---

### üß± Structure du module

---

#### üîπ 1. **Structure des p√©riodes d‚Äô√©valuation**

* **Ann√©e scolaire** : divis√©e en **3 trimestres**
* **Trimestre** : contient **2 s√©quences**
* **S√©quence** : p√©riode d‚Äô√©valuation (ex. : 1er Oct. - 31 Oct.)

| Ann√©e scolaire | Trimestres | S√©quences |
| -------------- | ---------- | --------- |
| 2024‚Äì2025      | 3          | 6 (2/s)   |

Chaque √©valuation (note) est li√©e √† une s√©quence pr√©cise.

---

#### üîπ 2. **Types d‚Äô√©valuations**

Chaque √©valuation est cat√©goris√©e selon son type :

* **Examen**
* **Devoir**
* **Interrogation**
* **Participation**
* **Travaux pratiques**
* **Autre (param√©trable)**

üõ†Ô∏è *Les types sont d√©finissables depuis l‚Äôinterface d‚Äôadministration.*

Chaque type peut avoir un **poids relatif** dans le calcul de la note finale de la mati√®re pour la s√©quence.

---

#### üîπ 3. **Cat√©gorisation des mati√®res**

Les mati√®res sont regroup√©es par **cat√©gories p√©dagogiques** :

* **Scientifiques**
* **Litt√©raires**
* **Sportives**
* **Langues**
* **Art et culture**
* **Autres**

üõ†Ô∏è *Les cat√©gories sont cr√©√©es/modifiables par l‚Äôadministrateur.*

---

#### üîπ 4. **Saisie des notes**

* Saisie par les **enseignants affect√©s √† une mati√®re et classe**
* Saisie par **type d‚Äô√©valuation**
* Possibilit√© de **limiter la saisie dans le temps** (ex : 1 semaine apr√®s fin de s√©quence)
* **Appr√©ciation facultative** par mati√®re et par s√©quence
* **Verrouillage automatique** apr√®s validation par la direction

---

#### üîπ 5. **Calculs automatiques**

* **Par mati√®re** : moyenne pond√©r√©e des types d‚Äô√©valuations selon leur poids
* **S√©quence** : somme pond√©r√©e des moyennes des mati√®res (avec leurs coefficients)
* **Trimestre** : moyenne des 2 s√©quences associ√©es
* **Par cat√©gorie** : moyenne des mati√®res appartenant √† cette cat√©gorie
* **Annuelle** : moyenne pond√©r√©e des 3 trimestres

Exemple :

```
Moyenne Trimestre 1 = (S√©quence 1 + S√©quence 2) / 2
```

---

#### üîπ 6. **Gestion des bulletins**

* Affichage des notes :

  * Par mati√®re
  * Par cat√©gorie
* Moyenne g√©n√©rale de l‚Äô√©l√®ve
* Moyenne par cat√©gorie
* Rang dans la classe
* Effectif
* Appr√©ciation g√©n√©rale du conseil
* Mention (Tr√®s bien, Bien, etc.)
* D√©cision (Admis, Redouble, etc.)
* Signature du chef d‚Äô√©tablissement
* Date de signature

üßæ **Design personnalisable** :

* Banni√®res, logo, ent√™te, structure du tableau
* Ajout d‚Äô√©l√©ments dynamiques (QR Code, signature auto, etc.)
* Mod√®les de bulletin d√©finis par l‚Äôadministrateur

üì§ Export :

* PDF t√©l√©chargeable
* Accessible √† l‚Äô√©l√®ve, parent et administrateur
* Historique par ann√©e et par p√©riode

---

#### üîπ 7. **Statistiques et indicateurs de performance**

* **Par √©l√®ve** :

  * √âvolution des moyennes s√©quentielles
  * Moyenne annuelle
  * R√©partition des mentions
* **Par mati√®re / enseignant** :

  * Taux de r√©ussite
  * Moyenne de classe
* **Par classe** :

  * Nombre d'√©l√®ves par mention
  * Rang par mati√®re
* **Exports Excel/PDF** automatiques

---

#### üîπ 8. **S√©curit√© et contr√¥le**

* Droits d‚Äôacc√®s diff√©renci√©s :

  * Enseignant : saisie uniquement sur ses mati√®res
  * Censeur : supervision et validation
  * Principal : g√©n√©ration bulletins
* Historique de modifications (log)
* Notifications lors des validations et cl√¥tures

---

### ‚úÖ R√©sum√© des Entit√©s impact√©es

* `evaluations` (s√©quence, type, apprenant, mati√®re, note)
* `bulletins` (trimestre, ann√©e, apprenant, classe)
* `moyennes` (s√©quence, trimestre, annuelle, par cat√©gorie)
* `types_evaluations` (libelle, poids)
* `categories_matieres` (nom, description)
* `appr√©ciations`, `mentions`, `decisions`, `templates_bulletins`

---

---

## üì¨ **Module 9 : Messagerie interne, notifications et communications**

---

### üéØ Objectif g√©n√©ral

Permettre une **communication fluide, cibl√©e et s√©curis√©e** entre les diff√©rents acteurs du syst√®me (√©l√®ves, enseignants, parents, administration, personnel), via une **messagerie interne**, des **notifications dynamiques** et une **gestion int√©gr√©e des emails/SMS/appels**.

---

### üß± Sous-modules fonctionnels

---

### üîπ 1. **Messagerie interne (Chat & Groupes)**

#### Fonctionnalit√©s principales :

* Envoi de **messages texte**, **fichiers** (PDF, image, audio), **liens**
* **Groupes de discussion** (classes, groupes p√©dagogiques, administratifs, etc.)
* Messagerie **individuelle (priv√©e)** entre utilisateurs
* **Historique des conversations**
* √âtat de lecture (vu / non vu)

#### Utilisateurs concern√©s :

* Tous les r√¥les : apprenant, enseignant, personnel, parent, administrateur

#### √âtat du syst√®me :

* Un utilisateur peut cr√©er une discussion priv√©e ou de groupe
* Chaque groupe poss√®de un **administrateur du groupe**
* Les messages sont enregistr√©s avec **horodatage**, **exp√©diteur**, **statut de lecture**

#### Tables impliqu√©es :

* `chats` : id, message, fichier\_url, utilisateur\_id, destinataire\_id, groupe\_id, horodatage, lu
* `groupes_chat` : id, nom, description, cr√©√©\_par, date\_creation
* `participants_groupes_chat` : id, groupe\_id, utilisateur\_id, r√¥le (admin/membre)

#### Contraintes :

* L'envoi de pi√®ces jointes est limit√© en taille et type
* Les groupes peuvent √™tre ferm√©s ou ouverts √† de nouveaux membres
* Interface de mod√©ration pour l‚Äôadmin du groupe

---

### üîπ 2. **Notifications internes**

#### Types de notifications :

* üìö √âv√©nements acad√©miques (nouvelle note, emploi du temps mis √† jour)
* üí¨ Nouveau message / annonce
* üìÑ Nouveau document disponible
* üíµ Paiement re√ßu ou en attente
* üéØ √âv√©nement √† venir (r√©union, conseil de classe)
* ‚ö†Ô∏è Alerte (sanction, absence, discipline)

#### Canal :

* Interface web
* Push Notification mobile (React Native)
* Email
* SMS (optionnel, d√©pend des int√©grations)

#### Tables :

* `notifications` : id, utilisateur\_id, titre, message, type, niveau\_urgence, lu, date\_creation
* `notification_settings` : utilisateur\_id, canal (email/sms/app/push), activ√©

#### √âtat du syst√®me :

* Chaque utilisateur peut **configurer ses pr√©f√©rences** de notification
* Les notifications importantes sont marqu√©es comme **urgentes**
* Les messages peuvent √™tre cliquables (liens dynamiques vers l‚Äô√©l√©ment concern√©)

---

### üîπ 3. **Emails et SMS (communication externe)**

#### Fonctionnalit√©s :

* Envoi d‚Äôemails :

  * Automatiques (bulletins, rappels de paiement, convocations)
  * Manuels (envoy√©s par un administrateur)
* Envoi de SMS :

  * Confirmation d‚Äôinscription
  * Absence / retard
  * Alertes urgentes

#### Tables :

* `emails_envoyes` : id, destinataire\_email, sujet, contenu, fichier\_joint, envoy√©\_par, date\_envoi
* `sms_envoyes` : id, numero, contenu, utilisateur\_id, envoy√©\_par, date\_envoi

#### API √† int√©grer :

* Email : SMTP, Mailgun, Sendgrid (configurable)
* SMS : Twilio, Orange SMS API, ou local SMS Gateway

#### Journalisation :

* Historique de tous les envois, succ√®s ou √©chec
* Rejouer un envoi si erreur d√©tect√©e
* Suivi de d√©livrabilit√© (email ouvert, cliqu√©)

---

### üîπ 4. **Annonces et actualit√©s**

#### Fonctionnalit√©s :

* Cr√©ation d‚Äôannonces visibles sur :

  * Le tableau de bord
  * L‚Äôaccueil mobile
* Ciblage par classe, niveau, groupe, r√¥le
* Ajout de documents ou images
* Param√©trage de dur√©e d‚Äôaffichage

#### Tables :

* `annonces` : id, titre, contenu, cible (classe/groupe/role), date\_debut, date\_fin, publi√©\_par

---

### ‚úÖ Droits d‚Äôacc√®s par r√¥le

| Action / R√¥le               | Apprenant | Parent | Enseignant | Admin | Personnel |
| --------------------------- | --------- | ------ | ---------- | ----- | --------- |
| Envoyer message priv√©       | ‚úÖ         | ‚úÖ      | ‚úÖ          | ‚úÖ     | ‚úÖ         |
| Cr√©er groupe de discussion  | ‚ùå         | ‚ùå      | ‚úÖ          | ‚úÖ     | ‚úÖ         |
| Recevoir notification       | ‚úÖ         | ‚úÖ      | ‚úÖ          | ‚úÖ     | ‚úÖ         |
| Envoyer email/sms           | ‚ùå         | ‚ùå      | ‚ùå          | ‚úÖ     | ‚ùå         |
| Publier une annonce         | ‚ùå         | ‚ùå      | ‚úÖ          | ‚úÖ     | ‚úÖ         |
| Personnaliser notifications | ‚úÖ         | ‚úÖ      | ‚úÖ          | ‚úÖ     | ‚úÖ         |

---

### üìä Exemples d‚Äôinterface

* **Centre de notifications** avec tri (par date, type, urgence)
* **Zone de chat** (web et mobile) avec recherche, pi√®ces jointes
* **Historique des communications** (email/SMS/notifications) dans le profil utilisateur
* **Module d‚Äôenvoi group√©** avec filtre dynamique (par niveau, r√¥le, classe, etc.)

---

## üì¶ Script SQL ‚Äì Module 9 : Messagerie, Notifications, Emails, SMS

```sql
-- ================================
-- 1. Messagerie (chat & groupes)
-- ================================

CREATE TABLE groupes_chat (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    cree_par INTEGER NOT NULL REFERENCES utilisateurs(id) ON DELETE CASCADE,
    date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE participants_groupes_chat (
    id SERIAL PRIMARY KEY,
    groupe_id INTEGER NOT NULL REFERENCES groupes_chat(id) ON DELETE CASCADE,
    utilisateur_id INTEGER NOT NULL REFERENCES utilisateurs(id) ON DELETE CASCADE,
    role VARCHAR(50) CHECK (role IN ('admin', 'membre')) DEFAULT 'membre',
    UNIQUE(groupe_id, utilisateur_id)
);

CREATE TABLE chats (
    id SERIAL PRIMARY KEY,
    message TEXT,
    fichier_url TEXT,
    expediteur_id INTEGER NOT NULL REFERENCES utilisateurs(id) ON DELETE CASCADE,
    destinataire_id INTEGER REFERENCES utilisateurs(id) ON DELETE CASCADE,
    groupe_id INTEGER REFERENCES groupes_chat(id) ON DELETE CASCADE,
    horodatage TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lu BOOLEAN DEFAULT FALSE,
    CHECK (
        (groupe_id IS NOT NULL AND destinataire_id IS NULL) OR 
        (groupe_id IS NULL AND destinataire_id IS NOT NULL)
    )
);

-- ================================
-- 2. Notifications internes
-- ================================

CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    utilisateur_id INTEGER NOT NULL REFERENCES utilisateurs(id) ON DELETE CASCADE,
    titre VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type VARCHAR(100), -- ex: 'paiement', 'note', 'absences'
    niveau_urgence VARCHAR(50) CHECK (niveau_urgence IN ('normal', 'important', 'critique')) DEFAULT 'normal',
    lu BOOLEAN DEFAULT FALSE,
    date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE notification_settings (
    id SERIAL PRIMARY KEY,
    utilisateur_id INTEGER UNIQUE NOT NULL REFERENCES utilisateurs(id) ON DELETE CASCADE,
    canal_email BOOLEAN DEFAULT TRUE,
    canal_sms BOOLEAN DEFAULT FALSE,
    canal_push BOOLEAN DEFAULT TRUE
);

-- ================================
-- 3. Emails et SMS (historique)
-- ================================

CREATE TABLE emails_envoyes (
    id SERIAL PRIMARY KEY,
    destinataire_email VARCHAR(255) NOT NULL,
    sujet VARCHAR(255),
    contenu TEXT NOT NULL,
    fichier_joint TEXT,
    envoye_par INTEGER REFERENCES utilisateurs(id),
    date_envoi TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    etat_envoi VARCHAR(50) DEFAULT 'envoy√©' -- ou '√©chou√©', 'en attente'
);

CREATE TABLE sms_envoyes (
    id SERIAL PRIMARY KEY,
    numero VARCHAR(20) NOT NULL,
    contenu TEXT NOT NULL,
    utilisateur_id INTEGER REFERENCES utilisateurs(id),
    envoye_par INTEGER REFERENCES utilisateurs(id),
    date_envoi TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    etat_envoi VARCHAR(50) DEFAULT 'envoy√©'
);

-- ================================
-- 4. Annonces / Actualit√©s
-- ================================

CREATE TABLE annonces (
    id SERIAL PRIMARY KEY,
    titre VARCHAR(255) NOT NULL,
    contenu TEXT NOT NULL,
    cible_type VARCHAR(50) CHECK (cible_type IN ('classe', 'groupe', 'role', 'tous')) NOT NULL,
    cible_id INTEGER, -- Peut r√©f√©rencer classe_id, groupe_id ou √™tre NULL pour "tous"
    date_debut DATE NOT NULL,
    date_fin DATE NOT NULL,
    publie_par INTEGER REFERENCES utilisateurs(id),
    date_publication TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üîê Notes importantes

* La table `utilisateurs` est suppos√©e d√©j√† existante avec `id` comme cl√© primaire.
* Les tables sont s√©curis√©es avec `ON DELETE CASCADE` pour garder la base coh√©rente.
* Vous pouvez ajouter des **triggers** pour envoyer automatiquement des emails/SMS depuis `notifications` ou `emails_envoyes` via int√©gration externe.

---


Voici le **Module 10** d√©taill√© : **Gestion documentaire, biblioth√®que et stocks**, avec toutes les explications fonctionnelles + le **script SQL complet des tables** pour que chaque fonctionnalit√© puisse √™tre impl√©ment√©e directement par un d√©veloppeur.

---

## ‚úÖ Module 10 : Gestion documentaire, biblioth√®que et stocks

Ce module regroupe trois grandes fonctionnalit√©s :

---

### üîπ A. Gestion documentaire (documents administratifs et scolaires)

**Fonctionnalit√©s :**

* Upload, consultation et partage des documents (PDF, images, Word, etc.).
* Classement par type, cat√©gorie et utilisateur concern√©.
* Gestion des droits d‚Äôacc√®s : public, restreint √† une classe/groupe/parent ou personnel.
* Historique de t√©l√©chargement, modification et versionnage.
* Signature num√©rique possible (version pro/facultative).
* Archivage automatique en fin d‚Äôann√©e scolaire.

---

### üîπ B. Gestion de biblioth√®que scolaire

**Fonctionnalit√©s :**

* Catalogue des ouvrages (livres, manuels, supports num√©riques...).
* Fiches d√©taill√©es : titre, auteur, ISBN, niveau conseill√©, image de couverture.
* Gestion des pr√™ts (date d‚Äôemprunt, retour, p√©nalit√©s de retard).
* Historique de lecture par √©l√®ve.
* Notifications en cas de retard.
* Suivi du stock r√©el des ouvrages.

---

### üîπ C. Gestion du mat√©riel scolaire et stock

**Fonctionnalit√©s :**

* Suivi des stocks d‚Äôobjets mat√©riels (craies, cahiers, ordinateurs, uniformes...).
* Entr√©es/sorties de stock (achats, dons, distributions).
* Alertes de seuil critique.
* Attribution de mat√©riel √† un personnel ou √©l√®ve (ex : uniforme, tablette).
* Historique d‚Äôutilisation par mat√©riel.

---

## üì¶ Script SQL ‚Äì Module 10 (PostgreSQL)

```sql
-- =============================
-- A. Gestion Documentaire
-- =============================

CREATE TABLE documents (
    id SERIAL PRIMARY KEY,
    titre VARCHAR(255) NOT NULL,
    description TEXT,
    fichier_url TEXT NOT NULL,
    type_document VARCHAR(100), -- ex: "bulletin", "rapport", "planning", etc.
    niveau_acces VARCHAR(50) CHECK (niveau_acces IN ('public', 'restreint', 'prive')) DEFAULT 'prive',
    utilisateur_cible_id INTEGER REFERENCES utilisateurs(id),
    classe_cible_id INTEGER REFERENCES classes(id),
    uploader_id INTEGER NOT NULL REFERENCES utilisateurs(id),
    date_upload TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    version VARCHAR(50) DEFAULT '1.0'
);

-- Historique des t√©l√©chargements
CREATE TABLE telechargements_documents (
    id SERIAL PRIMARY KEY,
    document_id INTEGER NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    utilisateur_id INTEGER NOT NULL REFERENCES utilisateurs(id),
    date_telechargement TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================
-- B. Biblioth√®que scolaire
-- =============================

CREATE TABLE ouvrages (
    id SERIAL PRIMARY KEY,
    titre VARCHAR(255) NOT NULL,
    auteur VARCHAR(255),
    isbn VARCHAR(20) UNIQUE,
    niveau_conseille VARCHAR(100),
    nombre_exemplaires INTEGER DEFAULT 1 CHECK (nombre_exemplaires >= 0),
    couverture_url TEXT,
    resume TEXT
);

CREATE TABLE prets_ouvrages (
    id SERIAL PRIMARY KEY,
    ouvrage_id INTEGER NOT NULL REFERENCES ouvrages(id),
    apprenant_id INTEGER NOT NULL REFERENCES apprenants(id),
    date_pret DATE NOT NULL,
    date_retour_prevue DATE,
    date_retour_effective DATE,
    penalite_montant NUMERIC(10,2) DEFAULT 0.00,
    statut VARCHAR(50) CHECK (statut IN ('en cours', 'retourne', 'retard')) DEFAULT 'en cours'
);

-- =============================
-- C. Mat√©riel scolaire & stock
-- =============================

CREATE TABLE materiels (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(255) NOT NULL,
    description TEXT,
    quantite_disponible INTEGER DEFAULT 0,
    seuil_alerte INTEGER DEFAULT 5,
    unite VARCHAR(50) DEFAULT 'unit√©',
    categorie VARCHAR(100),
    lieu_stockage VARCHAR(255)
);

CREATE TABLE mouvements_stock (
    id SERIAL PRIMARY KEY,
    materiel_id INTEGER NOT NULL REFERENCES materiels(id),
    type_mouvement VARCHAR(50) CHECK (type_mouvement IN ('entr√©e', 'sortie')),
    quantite INTEGER NOT NULL CHECK (quantite > 0),
    date_mouvement TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    responsable_id INTEGER REFERENCES utilisateurs(id),
    motif TEXT
);

CREATE TABLE attributions_materiel (
    id SERIAL PRIMARY KEY,
    materiel_id INTEGER NOT NULL REFERENCES materiels(id),
    type_beneficiaire VARCHAR(50) CHECK (type_beneficiaire IN ('apprenant', 'personnel')) NOT NULL,
    beneficiaire_id INTEGER NOT NULL,
    date_attribution TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    quantite INTEGER CHECK (quantite > 0),
    commentaire TEXT
);
```

---

## üß† Conseils techniques :

* Pour les **attributions de mat√©riel**, vous pouvez soit :

  * Utiliser une jointure polymorphe (`beneficiaire_id` + `type_beneficiaire`), comme ci-dessus.
  * Ou bien cr√©er deux tables s√©par√©es (si votre ORM n'aime pas le polymorphisme).
* Vous pouvez ajouter un moteur de recherche full-text sur `documents` et `ouvrages`.

---
Voici le **Module 11** du cahier de charge d√©taill√© : **Transport scolaire et itin√©raires**, avec ses fonctionnalit√©s compl√®tes et son **mod√®le de donn√©es SQL** pr√™t √† √™tre utilis√© pour d√©veloppement.

---

## ‚úÖ Module 11 : Transport scolaire et itin√©raires

Ce module permet √† l‚Äô√©tablissement de g√©rer efficacement l‚Äôensemble du syst√®me de transport des √©l√®ves, enseignants et personnels : bus, chauffeurs, arr√™ts, trajets, affectations et suivi.

---

### üîπ Objectifs

* Planifier les trajets quotidiens des bus scolaires.
* Suivre les itin√©raires, horaires et √©l√®ves affect√©s.
* G√©rer les chauffeurs, leurs affectations et leurs v√©hicules.
* Assurer un syst√®me de tra√ßabilit√©, de s√©curit√© et de ponctualit√©.

---

### üî∏ Fonctionnalit√©s

#### A. Gestion des bus scolaires

* Ajout et gestion des bus : num√©ro de plaque, capacit√©, statut, assurance.
* Historique d‚Äôentretien ou panne.
* Association d‚Äôun chauffeur √† un bus.

#### B. Gestion des chauffeurs

* Enregistrement des chauffeurs avec leurs informations personnelles, permis, contacts.
* Attribution d‚Äôun ou plusieurs bus.
* Historique d‚Äôactivit√©.

#### C. Gestion des itin√©raires

* Cr√©ation d‚Äôun trajet avec un nom, une ligne (ex : Ligne A), un point de d√©part et un point d‚Äôarriv√©e.
* D√©finition des **arr√™ts** avec ordre, horaire pr√©vu, latitude/longitude.
* Lien entre un trajet, un bus et un chauffeur.

#### D. Affectation des usagers (√©l√®ves/personnels)

* Inscription d‚Äôun √©l√®ve ou personnel √† un trajet/arr√™t.
* Pr√©cision du jour (lundi au vendredi) ou d‚Äôune p√©riode (ex : 1er trimestre).
* Suivi des pr√©sences √† bord (via pointage manuel ou NFC/RFID plus tard).
* Visualisation du planning de transport pour un usager.

#### E. Historique et journalisation

* Historique des trajets effectu√©s, retards, incidents.
* Notifications envoy√©es en cas de changement de ligne ou de retard important.

---

## üß© Script SQL ‚Äì Module 11 : Transport scolaire

```sql
-- ============================
-- 1. Table des bus
-- ============================
CREATE TABLE bus (
    id SERIAL PRIMARY KEY,
    numero_plaque VARCHAR(50) UNIQUE NOT NULL,
    capacite INTEGER NOT NULL CHECK (capacite > 0),
    statut VARCHAR(50) CHECK (statut IN ('actif', 'en maintenance', 'hors service')) DEFAULT 'actif',
    date_mise_en_service DATE,
    date_assurance DATE,
    commentaires TEXT
);

-- ============================
-- 2. Table des chauffeurs
-- ============================
CREATE TABLE chauffeurs (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    prenom VARCHAR(100),
    telephone VARCHAR(20),
    email VARCHAR(100),
    numero_permis VARCHAR(100) UNIQUE,
    date_expiration_permis DATE,
    adresse TEXT
);

-- ============================
-- 3. Association bus <-> chauffeur
-- ============================
CREATE TABLE bus_chauffeurs (
    id SERIAL PRIMARY KEY,
    bus_id INTEGER REFERENCES bus(id) ON DELETE CASCADE,
    chauffeur_id INTEGER REFERENCES chauffeurs(id) ON DELETE SET NULL,
    date_affectation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    actif BOOLEAN DEFAULT TRUE
);

-- ============================
-- 4. Table des itin√©raires
-- ============================
CREATE TABLE itineraires (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(255) NOT NULL,       -- Ex : "Trajet Nord-Est"
    ligne_code VARCHAR(50),          -- Ex : "Ligne A"
    point_depart VARCHAR(255),
    point_arrivee VARCHAR(255),
    distance_km NUMERIC(6,2),
    duree_estimee_minutes INTEGER,
    bus_id INTEGER REFERENCES bus(id),
    chauffeur_id INTEGER REFERENCES chauffeurs(id)
);

-- ============================
-- 5. Table des arr√™ts de bus
-- ============================
CREATE TABLE arrets (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(255) NOT NULL,
    adresse TEXT,
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION
);

-- ============================
-- 6. Liaison arr√™t <-> itin√©raire
-- ============================
CREATE TABLE itineraires_arrets (
    id SERIAL PRIMARY KEY,
    itineraire_id INTEGER REFERENCES itineraires(id) ON DELETE CASCADE,
    arret_id INTEGER REFERENCES arrets(id),
    ordre_passage INTEGER NOT NULL,
    heure_prevue TIME
);

-- ============================
-- 7. Affectation des usagers (√©l√®ves ou personnels)
-- ============================
CREATE TABLE affectations_transport (
    id SERIAL PRIMARY KEY,
    itineraire_id INTEGER REFERENCES itineraires(id),
    arret_id INTEGER REFERENCES arrets(id),
    usager_type VARCHAR(50) CHECK (usager_type IN ('apprenant', 'personnel')) NOT NULL,
    usager_id INTEGER NOT NULL,
    jours_semaine VARCHAR(100), -- Ex: "lundi,mardi,mercredi"
    periode TEXT, -- Ex : "Trimestre 1", "Ann√©e Scolaire 2024-2025"
    date_affectation DATE DEFAULT CURRENT_DATE
);

-- ============================
-- 8. Historique des trajets
-- ============================
CREATE TABLE historiques_trajets (
    id SERIAL PRIMARY KEY,
    itineraire_id INTEGER REFERENCES itineraires(id),
    date_trajet DATE NOT NULL,
    heure_depart TIME,
    heure_arrivee TIME,
    incidents TEXT,
    conducteur_id INTEGER REFERENCES chauffeurs(id)
);
```

---

## üß† Suggestions pour aller plus loin

* **Ajout futur** : Int√©gration GPS pour le suivi en temps r√©el des bus.
* QR Code / RFID pour pr√©sence des √©l√®ves √† bord.
* Application mobile d√©di√©e aux chauffeurs pour voir leur trajet du jour.

---
Voici la **mise √† jour compl√®te et d√©taill√©e du Module 12 : Gestion des d√©partements p√©dagogiques**, prenant en compte votre pr√©cision sur la relation multiple entre mati√®res et d√©partements :

---

## üìò **Module 12 : Gestion des d√©partements p√©dagogiques (Mise √† jour)**

### üéØ Objectif

Permettre √† l‚Äôadministration de l‚Äô√©tablissement de cr√©er, g√©rer et structurer des **d√©partements p√©dagogiques** regroupant des mati√®res, des enseignants responsables, et servant de base √† l‚Äôanalyse p√©dagogique (bulletins, statistiques, etc.).

---

### ‚öôÔ∏è **Fonctionnalit√©s principales**

1. **Cr√©ation et gestion des d√©partements**

   * Cr√©ation de d√©partements p√©dagogiques (ex. : Litt√©raire, Scientifique, Sportif, Technique, etc.).
   * Possibilit√© de d√©finir un **responsable de d√©partement** (enseignant ou personnel).
   * Description, code, couleur d‚Äôidentification.

2. **Association de mati√®res aux d√©partements**

   * Une **mati√®re peut appartenir √† plusieurs d√©partements**.
   * D√©finition du **type de rattachement** : `principale`, `optionnelle`, `secondaire`, etc.
   * Affectation visible dans les bulletins et les statistiques.

3. **Affichage et organisation**

   * Liste des mati√®res par d√©partement.
   * Liste des enseignants par d√©partement.
   * Possibilit√© d‚Äôajouter des **documents partag√©s** par d√©partement.

4. **Utilisation dans les autres modules**

   * **Bulletins** : regroupement des mati√®res par d√©partements avec moyennes par cat√©gorie.
   * **Statistiques p√©dagogiques** : analyse des r√©sultats par d√©partement.
   * **Gestion des emplois du temps** : filtrage des mati√®res par d√©partement.

---

### üß© **Mod√®le de donn√©es SQL**

```sql
-- Table des d√©partements
CREATE TABLE departements (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    code VARCHAR(20) UNIQUE,
    couleur VARCHAR(10),
    responsable_id INTEGER REFERENCES utilisateurs(id)
);

-- Table des mati√®res (existe d√©j√†)
-- La table matieres existe dans le module 4

-- Table pivot : association mati√®res <-> d√©partements
CREATE TABLE matieres_departements (
    id SERIAL PRIMARY KEY,
    matiere_id INTEGER NOT NULL REFERENCES matieres(id) ON DELETE CASCADE,
    departement_id INTEGER NOT NULL REFERENCES departements(id) ON DELETE CASCADE,
    type_matiere VARCHAR(50) DEFAULT 'principale', -- principale, secondaire, optionnelle
    UNIQUE(matiere_id, departement_id)
);
```

---

### üßÆ **Exemples d‚Äôusage**

* **Math√©matiques** :

  * Rattach√©e √† *D√©partement Scientifique* en tant que *principale*.
  * Rattach√©e √† *D√©partement Litt√©raire* en tant que *secondaire*.

* **√âducation Physique** :

  * Rattach√©e uniquement au *D√©partement Sportif*.

---

### üìå **Autorisations et r√¥les**

* Seuls les utilisateurs avec les droits : `gestion_departements` peuvent cr√©er/modifier les d√©partements.
* Les enseignants peuvent consulter leur d√©partement et les documents li√©s.
* Le responsable de d√©partement peut :

  * G√©rer les documents p√©dagogiques.
  * Consulter les statistiques de son d√©partement.
  * Proposer des affectations de mati√®res.

---

### üìä **Int√©gration aux bulletins**

Les bulletins affichent :

* Les mati√®res regroup√©es par d√©partement (cat√©gories).
* Moyennes par d√©partement visibles dans l‚Äôen-t√™te.
* Statistiques sur la performance de l‚Äôapprenant par bloc p√©dagogique.

---

Merci pour la pr√©cision. Voici la **mise √† jour compl√®te et finale du Module 12 : Gestion des d√©partements p√©dagogiques**, en tenant compte des fonctionnalit√©s **compl√®tes**, notamment :

* **Cr√©ation et gestion des d√©partements**
* **Suivi des d√©partements**
* **Administration des d√©partements**

---

## ‚úÖ **Module 12 : Gestion des D√©partements P√©dagogiques ‚Äì D√©tails Approfondis**

---

### üéØ Objectif du module

Permettre √† l‚Äô√©tablissement de structurer l‚Äôenseignement en **d√©partements p√©dagogiques**, d‚Äôy affecter des mati√®res, enseignants, responsables, et de suivre les performances p√©dagogiques sp√©cifiques √† chaque bloc disciplinaire.

---

## 1. üõ†Ô∏è **Cr√©ation et Gestion des D√©partements**

### Fonctionnalit√©s

* Cr√©ation d‚Äôun **d√©partement** avec les champs suivants :

  * Nom du d√©partement (ex: Scientifique, Litt√©raire, Sportif)
  * Code unique
  * Description
  * Couleur ou ic√¥ne d‚Äôidentification
  * D√©partement parent (hi√©rarchie √©ventuelle)
  * Actif / inactif
* Affectation :

  * **Responsable du d√©partement** (r√©f√©rence √† un utilisateur ou enseignant)
  * **Enseignants membres**
  * **Mati√®res** rattach√©es (une mati√®re pouvant appartenir √† plusieurs d√©partements avec diff√©rents types)
* Droits d‚Äôacc√®s √† d√©finir :

  * Lecture seule
  * Gestion compl√®te (ajout/suppression mati√®res/enseignants)
  * Statistiques du d√©partement

---

## 2. üìä **Suivi des D√©partements**

### Fonctionnalit√©s

* **Suivi p√©dagogique**

  * Moyennes par d√©partement pour chaque √©l√®ve/classe/p√©riode
  * Classement par d√©partement
  * Statistiques : taux de r√©ussite, moyenne g√©n√©rale du d√©partement, dispersion, mati√®re la plus faible/forte du d√©partement

* **Visualisation des bulletins par bloc**

  * Affichage des mati√®res class√©es par d√©partement
  * Moyenne par d√©partement dans les bulletins
  * Coefficients sp√©cifiques aux d√©partements

* **Alertes p√©dagogiques**

  * Moyenne d‚Äôun d√©partement < seuil d√©fini ‚Üí Alerte
  * √âvolution n√©gative sur 2 p√©riodes ‚Üí Notification responsable

---

## 3. üßë‚Äçüíº **Administration des D√©partements**

### Fonctionnalit√©s

* Gestion des **documents communs au d√©partement**

  * Politiques d‚Äôenseignement
  * Programmes
  * Exercices mutualis√©s
  * Comptes-rendus

* Gestion des **r√©unions de d√©partement**

  * Dates de r√©union, comptes-rendus, pr√©sence

* **Communication interne au d√©partement**

  * Chat ou email interne entre membres du d√©partement
  * Annonces internes au d√©partement (ex : planning des conseils, consignes)

* **Historique**

  * Historique des affectations de mati√®res
  * Historique des responsables
  * Historique des performances trimestrielles/s√©quentielles

---

## üîê **Gestion des r√¥les et permissions**

* Seuls les utilisateurs avec r√¥le `Admin D√©partement` ou autorisation explicite peuvent :

  * Cr√©er ou modifier un d√©partement
  * Affecter enseignants ou mati√®res
  * Consulter les statistiques internes
* Le **responsable de d√©partement** peut :

  * Ajouter des ressources internes
  * Envoyer des messages √† ses membres
  * Suivre les performances

---

## üß© **Structure SQL simplifi√©e (extrait)**

```sql
-- Table des d√©partements
CREATE TABLE departements (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL UNIQUE,
    code VARCHAR(20) UNIQUE,
    description TEXT,
    couleur VARCHAR(10),
    actif BOOLEAN DEFAULT TRUE,
    responsable_id INTEGER REFERENCES utilisateurs(id),
    parent_id INTEGER REFERENCES departements(id)
);

-- Table pivot mati√®res ‚Üî d√©partements
CREATE TABLE matieres_departements (
    id SERIAL PRIMARY KEY,
    matiere_id INTEGER NOT NULL REFERENCES matieres(id) ON DELETE CASCADE,
    departement_id INTEGER NOT NULL REFERENCES departements(id) ON DELETE CASCADE,
    type_matiere VARCHAR(50) DEFAULT 'principale', -- principale, secondaire, optionnelle
    UNIQUE(matiere_id, departement_id)
);

-- Table des membres du d√©partement
CREATE TABLE membres_departements (
    id SERIAL PRIMARY KEY,
    utilisateur_id INTEGER NOT NULL REFERENCES utilisateurs(id),
    departement_id INTEGER NOT NULL REFERENCES departements(id),
    role_in_departement VARCHAR(50), -- membre, coordinateur, r√©dacteur
    date_affectation DATE DEFAULT CURRENT_DATE,
    UNIQUE(utilisateur_id, departement_id)
);
```

---

## üìå Exemple d‚Äôusage

* La mati√®re **Math√©matiques** est affect√©e √† :

  * *D√©partement Scientifique* (type : principale)
  * *D√©partement Litt√©raire* (type : secondaire)
* Le professeur **M. Tchinda** est membre de deux d√©partements.
* Le bulletin de l‚Äô√©l√®ve affiche :

  * Bloc "Scientifique" : Math√©matiques, Physique, Chimie + moyenne du bloc
  * Bloc "Litt√©raire" : Fran√ßais, Histoire, Philosophie + moyenne du bloc

---

Voici la **fiche d√©taill√©e** pour le **Module 13 : Gestion des Emails et Communications Externes**, qui s‚Äôint√®gre parfaitement dans un syst√®me de gestion scolaire complet.

---

## üì¨ **Module 13 : Gestion des Emails et Communications Externes**

---

### üéØ Objectif du module

Permettre √† l‚Äô√©cole d‚Äôinteragir efficacement avec les parents, √©l√®ves, enseignants et partenaires **en dehors** de la plateforme via des **emails personnalis√©s**, des **notifications programm√©es**, des **newsletters**, des **confirmations d‚Äôinscription**, des **re√ßus**, etc.

---

## 1. ‚úâÔ∏è **Envoi d‚ÄôEmails Externes**

### Fonctionnalit√©s principales :

* Envoi d‚Äôemails automatiques ou manuels vers :

  * Apprenants
  * Parents
  * Enseignants
  * Employ√©s
  * Partenaires
* Templates pr√©d√©finis :

  * Confirmation d‚Äôinscription / admission
  * Paiement re√ßu / facture
  * Convocation √† une r√©union
  * Notification de bulletin ou r√©sultat
  * Absence prolong√©e
  * Messages de d√©but/fin d‚Äôann√©e
* Signature personnalis√©e de l‚Äô√©tablissement
* Gestion des pi√®ces jointes (re√ßus, bulletins, documents officiels)

---

## 2. üóìÔ∏è **Planification & Suivi**

### Fonctionnalit√©s :

* Programmation des campagnes :

  * Par date
  * Par √©v√©nement (ex : bulletin valid√©, paiement re√ßu)
* Segmentation des destinataires :

  * Par classe, niveau, r√¥le, statut d‚Äôinscription, etc.
* Suivi des statuts d‚Äôenvoi :

  * Envoy√©, √âchec, Ouvert, Cliqu√©
* Historique complet des envois avec filtres
* Relance automatique configurable

---

## 3. üß© **Mod√®les d‚ÄôEmails Dynamiques**

### Champs dynamiques pour mod√®les :

* `{nom_apprenant}`, `{nom_parent}`, `{classe}`, `{montant_paye}`, `{date}`, `{lien_bulletin}`, etc.

### Gestion des mod√®les :

* Cr√©ation, modification, activation/d√©sactivation
* Aper√ßu avant envoi
* Gestion multi-langues (fran√ßais/anglais)

---

## 4. üîí **Journalisation & S√©curit√©**

* Journal d‚Äôaudit de tous les emails envoy√©s
* Journal par utilisateur (emetteur et destinataire)
* Droits d‚Äôacc√®s :

  * Envoi par r√¥les autoris√©s (ex: Direction, Secr√©tariat)
  * Visualisation du journal d‚Äôenvoi par administrateurs

---

## 5. üõ†Ô∏è **Param√©trage SMTP & API externes**

### Fonctionnalit√©s :

* Int√©gration de serveurs SMTP personnalis√©s :

  * Gmail, Outlook, Mailgun, Sendinblue, etc.
* Gestion des cl√©s API pour :

  * Email transactionnel
  * Email marketing
* Test de connexion SMTP

---

## üß± **Structure SQL simplifi√©e**

```sql
-- Mod√®les d‚Äôemails
CREATE TABLE email_templates (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    sujet VARCHAR(200) NOT NULL,
    corps TEXT NOT NULL,
    langue VARCHAR(10) DEFAULT 'fr',
    actif BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Campagnes d‚Äôemail (programm√©es ou imm√©diates)
CREATE TABLE email_campaigns (
    id SERIAL PRIMARY KEY,
    template_id INTEGER REFERENCES email_templates(id),
    sujet_personnalise VARCHAR(200),
    corps_personnalise TEXT,
    planifie_pour TIMESTAMP,
    cree_par INTEGER REFERENCES utilisateurs(id),
    statut VARCHAR(20) DEFAULT 'programm√©', -- envoy√©, √©chec, annul√©
    cible JSONB -- ex: { "classe_id": 12, "role": "parent" }
);

-- Journal des envois
CREATE TABLE email_logs (
    id SERIAL PRIMARY KEY,
    destinataire_email VARCHAR(150),
    sujet VARCHAR(200),
    contenu TEXT,
    date_envoi TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    statut_envoi VARCHAR(20), -- envoy√©, erreur, en attente
    erreur_message TEXT,
    campaign_id INTEGER REFERENCES email_campaigns(id)
);
```

---

## üñ•Ô∏è Interface utilisateur pr√©vue

### Interfaces c√¥t√© admin :

* Gestion des mod√®les d‚Äôemail
* Lancement de campagnes
* Visualisation des journaux
* Test SMTP
* √âditeur WYSIWYG pour les mod√®les

### Interfaces c√¥t√© utilisateurs :

* Historique des communications re√ßues (parents/apprenants)
* Option de d√©sabonnement (email marketing)

---

## üîê R√¥les et permissions

| R√¥le                      | Acc√®s aux fonctionnalit√©s                  |
| ------------------------- | ------------------------------------------ |
| Admin syst√®me             | Tous droits (cr√©ation, envoi, config SMTP) |
| Responsable administratif | Cr√©ation + envoi des emails                |
| Enseignant                | Envoi restreint √† ses classes (si activ√©)  |
| Parent/√âl√®ve              | R√©ception uniquement                       |

---

## üîî Extension future possible :

* Notifications SMS coupl√©es √† l‚Äôemail
* Automatisation avec des **workflows** (ex: lors d‚Äôune absence de 3 jours ‚Üí alerte parent)
* G√©n√©ration PDF en pi√®ce jointe (bulletins, factures)

---

Voici la fiche **d√©taill√©e** pour le **Module 14 : Statistiques et Indicateurs de Performance** dans le syst√®me de gestion scolaire.

---

# üìä Module 14 : Statistiques et Indicateurs de Performance

---

### üéØ Objectif :

Fournir √† l‚Äôadministration, aux enseignants et aux d√©cideurs une **vue claire, mesurable et exploitable** de la performance globale des √©l√®ves, enseignants, classes, et d√©partements sur des p√©riodes d√©finies.

Permet des **analyses p√©dagogiques**, **financi√®res**, **disciplinaires** et **administratives** gr√¢ce √† des tableaux de bord dynamiques, des filtres avanc√©s et des repr√©sentations graphiques.

---

## 1. üë©‚Äçüéì **Statistiques Acad√©miques**

### Par apprenant :

* Moyenne g√©n√©rale par s√©quence / trimestre / ann√©e
* Classement par niveau, par classe
* Progression ou r√©gression (courbes par p√©riode)
* Historique des r√©sultats (ann√©e par ann√©e)
* Taux d‚Äôabsences

### Par classe :

* Moyenne de la classe par mati√®re
* R√©partition des notes (par intervalles)
* Meilleurs / moins bons √©l√®ves
* Classement interclasses
* Taux de r√©ussite aux examens

### Par mati√®re :

* Moyenne g√©n√©rale par mati√®re
* Comparaison interclasses
* Difficult√© per√ßue (moyenne < 10/20)
* √âcart-type des notes

---

## 2. üë®‚Äçüè´ **Statistiques sur les Enseignants**

* Nombre de cours assur√©s / manqu√©s
* Ponctualit√© (via les pr√©sences)
* Retards fr√©quents
* Nombre d‚Äô√©l√®ves par enseignant
* √âvolution des moyennes des √©l√®ves par mati√®re enseign√©e
* Feedback des apprenants (si activ√©)

---

## 3. üí∏ **Statistiques Financi√®res**

* Montants per√ßus par p√©riode
* Taux de paiement par classe, par niveau, par cycle
* Montants impay√©s / en retard
* Ventilation par type de frais (scolarit√©, uniforme, transport, etc.)
* Salaires vers√©s par p√©riode
* R√©partition des d√©penses

---

## 4. üõë **Statistiques de Discipline**

* Nombre de sanctions par √©l√®ve / par classe
* R√©currence des incidents
* Motifs les plus fr√©quents
* Sanctions par enseignant / surveillant

---

## 5. üì¶ **Statistiques sur la Biblioth√®que / Stocks**

* Livres les plus emprunt√©s
* Dur√©e moyenne d‚Äôemprunt
* √âl√©ments en rupture ou faibles stocks
* Mat√©riels d√©t√©rior√©s ou perdus

---

## 6. üöå **Statistiques de Transport**

* Taux d‚Äôoccupation par ligne
* Retards constat√©s
* √âvolution des inscrits au transport
* Co√ªts associ√©s

---

## 7. üßÆ **Indicateurs cl√©s de performance (KPI)**

| KPI                             | Description                                   |
| ------------------------------- | --------------------------------------------- |
| Taux de r√©ussite global         | % d‚Äô√©l√®ves ayant une moyenne ‚â• 10/20          |
| Moyenne par niveau / classe     | Indicateur de performance p√©dagogique         |
| Taux d‚Äôassiduit√©                | Pr√©sences / Total jours                       |
| Retard enseignant               | Nombre de retards sur p√©riode donn√©e          |
| Solvabilit√© financi√®re          | % de paiements effectu√©s par rapport au pr√©vu |
| Satisfaction parent (optionnel) | R√©sultat d‚Äôenqu√™tes                           |
| Progression individuelle        | √âvolution de la moyenne d‚Äôun √©l√®ve            |

---

## 8. üìà Interfaces utilisateurs (Frontend)

* **Tableaux de bord dynamiques** avec filtres par :

  * Ann√©e scolaire
  * Trimestre / S√©quence
  * Classe / Niveau / Cycle
  * Enseignant
  * Mati√®re
* Graphiques :

  * Barres, courbes, camemberts
* Export :

  * PDF / Excel / CSV
* Rapports imprimables automatiques

---

## 9. üîê R√¥les et acc√®s

| R√¥le                    | Acc√®s                                   |
| ----------------------- | --------------------------------------- |
| Directeur / Proviseur   | Toutes les statistiques globales        |
| Responsable p√©dagogique | √âl√®ves, classes, mati√®res, enseignants  |
| Enseignant              | Statistiques de ses mati√®res et classes |
| Parent                  | Statistiques de ses enfants uniquement  |
| Comptable               | Donn√©es financi√®res uniquement          |

---

## 10. üß± Base de donn√©es ‚Äì Extrait des tables associ√©es

```sql
CREATE TABLE indicateurs_kpi (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(150) NOT NULL,
    description TEXT,
    type VARCHAR(50), -- 'academique', 'financier', 'discipline', etc.
    code_unique VARCHAR(50) UNIQUE, -- ex: 'TAUX_REUSSITE'
    actif BOOLEAN DEFAULT TRUE,
    date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE indicateur_valeurs (
    id SERIAL PRIMARY KEY,
    indicateur_id INTEGER REFERENCES indicateurs_kpi(id),
    valeur NUMERIC,
    periode VARCHAR(50), -- ex: "Trimestre 1 - 2025"
    classe_id INTEGER,
    niveau_id INTEGER,
    enseignant_id INTEGER,
    apprenant_id INTEGER,
    date_calcul TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## 11. üîÑ Automatisation

* Calcul programm√© tous les soirs (ou sur demande)
* D√©tection automatique des anomalies (ex: chute brutale de moyenne)
* Alertes personnalisables (ex: si moyenne < 8 sur 2 s√©quences)

---

Voici la fiche **d√©taill√©e** pour le **Module 15 : Archivage, Sauvegarde et Conformit√© RGPD** du syst√®me de gestion scolaire.

---

# üóÑÔ∏è Module 15 : Archivage, Sauvegarde et Conformit√© RGPD

---

### üéØ Objectif :

Garantir la **s√©curit√©, la p√©rennit√©, la conformit√© l√©gale** et le **respect de la vie priv√©e** des donn√©es personnelles trait√©es dans le syst√®me scolaire, en accord avec la r√©glementation RGPD (R√®glement G√©n√©ral sur la Protection des Donn√©es) et les bonnes pratiques d‚Äôarchivage.

---

## 1. üìÅ Archivage des Donn√©es Acad√©miques

### Donn√©es archiv√©es √† la fin de chaque ann√©e scolaire :

* Apprenants : donn√©es de passage de classe, r√©inscription
* Bulletins, √©valuations, moyennes
* Pr√©sences et sanctions
* Affectations enseignants / mati√®res
* Statistiques annuelles
* Comptes financiers et paiements

### R√®gles d‚Äôarchivage :

* **Lecture seule** apr√®s cl√¥ture de l‚Äôann√©e
* Non modifiables, mais consultables avec r√¥les autoris√©s
* Restauration possible √† des fins d'audit ou comparaisons

### Table SQL type :

```sql
CREATE TABLE archives_annee_scolaire (
    id SERIAL PRIMARY KEY,
    annee VARCHAR(10) NOT NULL,
    date_cloture TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    utilisateur_id INTEGER REFERENCES utilisateurs(id), -- qui a valid√©
    commentaire TEXT,
    statut VARCHAR(50) DEFAULT 'archiv√©'
);
```

---

## 2. üíæ Sauvegarde des donn√©es

### Types de sauvegardes :

* **Automatiques** : tous les jours √† heure fixe
* **Manuelles** : via interface admin
* **Versionn√©es** : chaque backup est horodat√© et versionn√©

### Contenu :

* Base de donn√©es compl√®te
* Fichiers t√©l√©vers√©s (documents, photos, bulletins, etc.)
* Logs et journaux critiques
* Configuration syst√®me

### M√©thodes de sauvegarde :

* Export PostgreSQL (dump SQL)
* ZIP des r√©pertoires de fichiers
* Sauvegarde distante possible (Google Drive, AWS S3, FTP, etc.)

### Interface utilisateur :

* Liste des sauvegardes
* T√©l√©charger / Restaurer / Supprimer
* √âtat de la derni√®re sauvegarde (succ√®s/√©chec)

---

## 3. üõ°Ô∏è Conformit√© RGPD et Protection des donn√©es

### 3.1 Principes respect√©s :

* **Consentement** : recueil du consentement des utilisateurs √† la collecte de donn√©es
* **Finalit√©** : les donn√©es sont utilis√©es exclusivement pour des finalit√©s p√©dagogiques et administratives
* **Minimisation** : seules les donn√©es n√©cessaires sont collect√©es
* **Dur√©e de conservation limit√©e** : selon la l√©gislation en vigueur

### 3.2 Fonctionnalit√©s RGPD int√©gr√©es :

* Portail de **demande d'acc√®s** √† ses donn√©es personnelles
* **Export des donn√©es personnelles** sur demande (PDF ou JSON)
* **Suppression des donn√©es** (droit √† l‚Äôoubli) avec v√©rification manuelle
* **Gestion des consentements** des utilisateurs (parents, √©l√®ves, enseignants)
* **Journalisation** des actions sensibles (consultation / modification de donn√©es personnelles)

```sql
CREATE TABLE rgpd_demandes (
    id SERIAL PRIMARY KEY,
    utilisateur_id INTEGER REFERENCES utilisateurs(id),
    type_demande VARCHAR(50), -- 'export', 'suppression', etc.
    statut VARCHAR(30) DEFAULT 'en attente',
    date_demande TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    date_traitement TIMESTAMP,
    admin_id INTEGER REFERENCES utilisateurs(id)
);
```

---

## 4. üìù Journalisation (Logs & Audit)

### Suivi :

* Qui a modifi√©, consult√© ou supprim√© une donn√©e
* Journal des connexions (IP, date/heure, type d‚Äôappareil)
* Activit√© syst√®me (archivage, sauvegarde, restauration)

### Stockage :

* Logs structur√©s dans la base de donn√©es
* Exportables pour audit externe
* R√©tention configurable (par d√©faut : 3 √† 5 ans)

```sql
CREATE TABLE logs_audit (
    id SERIAL PRIMARY KEY,
    utilisateur_id INTEGER REFERENCES utilisateurs(id),
    action TEXT,
    cible TEXT,
    date_action TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ip VARCHAR(45),
    details TEXT
);
```

---

## 5. üîê S√©curit√© et chiffrement

* Chiffrement des mots de passe (bcrypt, Argon2)
* Chiffrement des sauvegardes sensibles
* Stockage s√©curis√© des documents
* Authentification forte (2FA possible)
* Acc√®s restreint aux sauvegardes et archives

---

## 6. üì§ Export et transfert s√©curis√©

* Export de toutes les donn√©es au format PDF / CSV / SQL
* Int√©gration avec outils d‚Äôaudit externe
* Archivage sur cl√© USB chiffr√©e ou serveurs s√©curis√©s
* Journalisation de tous les exports (qui, quand, quoi)

---

## 7. üîÑ Cycle de vie des donn√©es

| √âtape            | Description                                 |
| ---------------- | ------------------------------------------- |
| Collecte         | Via formulaires d‚Äôinscription ou interfaces |
| Traitement       | Utilisation p√©dagogique et administrative   |
| Archivage        | Automatique ou manuel apr√®s chaque session  |
| Export / Demande | √Ä tout moment par utilisateur via RGPD      |
| Suppression      | Manuelle ou automatis√©e apr√®s X ann√©es      |

---

Voici la fiche compl√®te et d√©taill√©e du **Module 16 : Sauvegarde hors-ligne et mobile** pour votre syst√®me de gestion scolaire.

---

# üì∂ Module 16 : Sauvegarde Hors-ligne et Mobile

---

### üéØ Objectif :

Garantir la **continuit√© des services essentiels** m√™me en cas de coupure de connexion internet ou d‚Äôinstabilit√© r√©seau, particuli√®rement dans les zones rurales ou peu connect√©es, tout en permettant aux agents autoris√©s d‚Äôutiliser l‚Äôapplication sur des **appareils mobiles** (smartphones/tablettes) en mode **hors-ligne**, avec synchronisation automatique d√®s r√©tablissement du r√©seau.

---

## 1. üõ†Ô∏è Fonctionnalit√©s Principales

### 1.1 Mode hors-ligne (offline-first)

* Consultation des donn√©es locales :

  * Liste des √©l√®ves, emplois du temps, notes, pr√©sences, paiements r√©cents
* Saisie possible sans connexion :

  * Pr√©sences, retards, √©valuations, remarques disciplinaires, paiements, messages internes
* Sauvegarde locale (via IndexedDB ou SQLite mobile)
* Synchronisation en arri√®re-plan d√®s le retour de la connexion

### 1.2 Synchronisation des donn√©es

* D√©tection automatique de la connectivit√©
* Queue des actions √† synchroniser (ajouts/modifications)
* R√©solution des conflits (ex : modification simultan√©e en ligne et hors-ligne)
* Journalisation des synchronisations r√©ussies ou √©chou√©es

---

## 2. üì± Compatibilit√© mobile

### 2.1 Plateformes vis√©es :

* Android (100% pris en charge)
* iOS (optionnel, selon priorit√© du projet)
* Web Mobile Responsive (PWA ‚Äì Progressive Web App)

### 2.2 Modules disponibles en mobile :

| Module                | Lecture | √âcriture | Hors-ligne support√©  |
| --------------------- | ------- | -------- | -------------------- |
| Liste des √©l√®ves      | ‚úÖ       | ‚ùå        | ‚úÖ                    |
| Pr√©sences             | ‚úÖ       | ‚úÖ        | ‚úÖ                    |
| Notes / √âvaluations   | ‚úÖ       | ‚úÖ        | ‚úÖ                    |
| Emploi du temps       | ‚úÖ       | ‚ùå        | ‚úÖ                    |
| Paiements             | ‚úÖ       | ‚úÖ        | ‚úÖ                    |
| Messagerie interne    | ‚úÖ       | ‚úÖ        | ‚úÖ (stockage diff√©r√©) |
| Documents / Bulletins | ‚úÖ       | ‚ùå        | ‚úÖ (PDF en cache)     |

---

## 3. üß© Architecture technique

### 3.1 Technologies possibles

* **PWA (Progressive Web App)** avec :

  * React.js / Vue.js
  * IndexedDB pour le stockage local
  * Service Workers pour interception des requ√™tes
* **Application mobile native** (si besoin) :

  * React Native / Flutter
  * SQLite pour la base de donn√©es embarqu√©e
  * Background Sync (avec AppSync ou custom API)

### 3.2 Gestion des donn√©es locales :

```plaintext
+---------------------+
| LocalStorage        |
| IndexedDB / SQLite  |
+---------------------+
         ‚áÖ
+----------------------+
| Synchronisation API  |
| /sync/batch          |
+----------------------+
         ‚áÖ
+------------------------+
| Serveur principal (API)|
| avec contr√¥le d'acc√®s  |
+------------------------+
```

---

## 4. üîÑ Exemples de sc√©narios

### 4.1 Professeur en zone sans r√©seau :

* Ouvre l‚Äôapplication mobile PWA
* Enregistre les pr√©sences et les notes
* Les donn√©es sont stock√©es localement
* Le soir, une fois connect√© au Wi-Fi, tout se synchronise automatiquement

### 4.2 Agent de scolarit√© en tourn√©e :

* Utilise une tablette pour enregistrer les frais dans les villages
* Les re√ßus sont g√©n√©r√©s hors-ligne (PDF)
* Paiements stock√©s localement puis envoy√©s d√®s retour √† l'√©cole

---

## 5. üîê S√©curit√©

* Donn√©es locales chiffr√©es (AES ou niveau SQLite/IndexedDB)
* Authentification persistante avec expiration
* Donn√©es synchronis√©es via HTTPS uniquement
* Journalisation des op√©rations locales et distantes

---

## 6. üß™ Suivi et Administration

* Tableau de bord des synchronisations :

  * Derni√®re date de sync
  * √âchecs et erreurs
  * Volume de donn√©es √©chang√©
* Alertes en cas de donn√©es non synchronis√©es depuis X jours
* Possibilit√© de forcer la resynchronisation d‚Äôun appareil

---

## 7. üìÇ Extrait SQL / Mod√®le JSON local

### Exemple : Queue de synchronisation locale

```json
{
  "queue": [
    {
      "id": "local-12345",
      "type": "presence",
      "payload": {
        "apprenant_id": 27,
        "date": "2025-05-18",
        "statut": "Absent",
        "remarque": "Absence non justifi√©e"
      },
      "synced": false,
      "timestamp": 1716039123
    }
  ]
}
```

---

## 8. üìä Avantages

* R√©silience totale du syst√®me (connectivit√© non bloquante)
* Am√©lioration de l‚Äôacc√®s et de la mobilit√©
* Meilleure adoption dans les zones rurales ou sans couverture stable
* R√©duction des pertes de donn√©es en cas d'incident r√©seau

---

Voici la fiche compl√®te du **Module 17**, int√©grant trois sous-modules cruciaux pour un syst√®me de gestion scolaire avanc√© : **G√©n√©ration de certificats PDF**, **Gestion des anciens √©l√®ves**, et **Tableau de bord p√©dagogique**.

---

# üß© Module 17 : G√©n√©ration de certificats PDF, gestion des anciens √©l√®ves et tableau de bord p√©dagogique

---

## üîπ 17.1 G√©n√©ration de certificats PDF

### üéØ Objectif :

Permettre l‚Äô√©mission automatique de **certificats officiels** (scolarit√©, r√©ussite, inscription, transfert, attestation de notes‚Ä¶) au format **PDF s√©curis√©** avec personnalisation, tra√ßabilit√© et signature num√©rique.

### üîß Fonctionnalit√©s principales :

* G√©n√©ration automatique √† partir des donn√©es enregistr√©es
* Mod√®les personnalisables par niveau ou type de document
* Int√©gration des **logos, cachets, signatures, QR code de v√©rification**
* Possibilit√© d‚Äôimprimer, t√©l√©charger ou envoyer par mail
* Historique des certificats √©mis pour chaque √©l√®ve

### üìÑ Types de certificats :

* Attestation de scolarit√©
* Attestation de r√©ussite
* Attestation de notes
* Certificat de transfert
* Attestation de pr√©sence
* Relev√© de notes simplifi√©

### üîê S√©curit√© :

* QR Code menant √† une URL de v√©rification (ex : `/certificat/verify/:id`)
* Signature num√©rique (cl√© publique de l‚Äô√©tablissement)
* Journal des √©missions de documents

### üóÉÔ∏è Tables principales :

```sql
CREATE TABLE certificats (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  type_certificat VARCHAR(50),
  contenu_json JSONB,
  date_emission DATE DEFAULT CURRENT_DATE,
  signature_pdf BOOLEAN DEFAULT FALSE,
  qr_code_url TEXT,
  emis_par INTEGER REFERENCES utilisateurs(id)
);
```

---

## üîπ 17.2 Gestion des anciens √©l√®ves

### üéØ Objectif :

Assurer la **tra√ßabilit√© et l‚Äôhistorique** des √©l√®ves apr√®s leur d√©part de l‚Äô√©tablissement pour assurer le suivi administratif, les statistiques de performance ou des campagnes de communication (r√©seau des anciens, dons, etc.).

### üîß Fonctionnalit√©s principales :

* Archivage automatique √† la fin de l‚Äôann√©e ou sur d√©cision manuelle
* Base de donn√©es distincte (statut "ancien √©l√®ve")
* Suivi de leurs parcours (si connu : universit√©, entreprise)
* Recontact possible (mail, t√©l√©phone, formulaire)
* Export de donn√©es (PDF, Excel, CSV)
* Filtrage par ann√©e de sortie, s√©rie, r√©ussite, etc.

### üìÑ D√©tails conserv√©s :

* Parcours acad√©mique complet
* R√©sultats obtenus
* Certificats g√©n√©r√©s
* Documents administratifs

### üóÉÔ∏è Tables principales :

```sql
CREATE TABLE anciens_eleves (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER UNIQUE REFERENCES apprenants(id),
  annee_sortie INTEGER,
  motif_sortie TEXT,
  parcours_post_scolaire TEXT,
  contact_email TEXT,
  contact_tel TEXT,
  recontacte BOOLEAN DEFAULT FALSE
);
```

---

## üîπ 17.3 Tableau de bord p√©dagogique

### üéØ Objectif :

Fournir une **vue synth√©tique et visuelle** de la performance p√©dagogique par classe, enseignant, mati√®re, niveau ou p√©riode, pour permettre des prises de d√©cision √©clair√©es par la direction ou les coordinateurs p√©dagogiques.

### üîß Fonctionnalit√©s principales :

* Visualisation :

  * Moyennes par classe, mati√®re, enseignant, trimestre
  * R√©partition des notes par intervalle (0-5, 6-10, etc.)
  * Nombre d‚Äô√©l√®ves ayant √©chou√©/r√©ussi
* Suivi :

  * Taux d‚Äôassiduit√©
  * √âvolution des notes par p√©riode
  * Comparaison inter-trimestre
* Indicateurs cl√©s :

  * Moyenne g√©n√©rale par niveau
  * Meilleures/mauvaises mati√®res
  * Classe la plus performante
  * √âvolution par ann√©e scolaire
* Exports PDF/Excel

### üìä Visualisations :

* Graphiques lin√©aires (√©volution)
* Diagrammes en barres ou circulaires (r√©partition)
* Tableaux dynamiques filtrables

### üóÉÔ∏è Tables utilis√©es :

* `evaluations`, `notes`, `bulletins`, `classes`, `enseignants`, `presences`, `mati√®res`

### üìå Exemple d‚Äôindicateurs :

| Indicateur                     | Exemple                 |
| ------------------------------ | ----------------------- |
| Moyenne g√©n√©rale 1er Trimestre | 12,45/20                |
| Taux d‚Äôassiduit√© 2e Trimestre  | 93,2%                   |
| Mati√®re la plus r√©ussie        | Math√©matiques (15,3/20) |
| √âl√®ve le plus performant       | Tchamga Steve (17,9/20) |
| Classe la plus performante     | Terminale D             |

---

## üîê S√©curit√© et Permissions :

* Seuls les administrateurs, chefs d‚Äô√©tablissement et coordinateurs p√©dagogiques peuvent acc√©der √† tout le module
* Les enseignants voient uniquement leurs donn√©es et indicateurs
* Signature obligatoire avant toute √©mission de certificat

---

Parfait, poursuivons avec le **Module 18** en deux volets compl√©mentaires :

---

# üß© Module 18 : Remplacement automatique des enseignants absents et g√©n√©ration de documents administratifs dynamiques

---

## üîπ 18.1 Remplacement automatique des enseignants absents

### üéØ Objectif :

Permettre √† l‚Äôadministration de **g√©rer efficacement les absences des enseignants** en proposant automatiquement des rempla√ßants disponibles selon l‚Äôemploi du temps, la mati√®re et les niveaux d‚Äôenseignement.

---

### üîß Fonctionnalit√©s principales :

#### ‚úÖ D√©claration d‚Äôabsence :

* Interface pour signaler une absence ponctuelle ou prolong√©e
* Possibilit√© d‚Äôajouter un justificatif (pi√®ce jointe)
* Validation par un responsable p√©dagogique

#### üîÑ Recherche automatique de rempla√ßant :

* D√©tection des enseignants libres √† la m√™me p√©riode
* Filtrage par :

  * Mati√®re compatible
  * Disponibilit√© dans l‚Äôemploi du temps
  * Niveau d‚Äôhabilitation (m√™mes classes ou √©quivalent)
* Proposition automatique de rempla√ßants

#### üìù Validation et affectation :

* Liste des propositions class√©e par pertinence
* Affectation manuelle ou automatique
* Notification imm√©diate du rempla√ßant par messagerie/email

#### üïì Historique des remplacements :

* Suivi de tous les remplacements effectu√©s
* Rapports mensuels ou annuels

---

### üóÉÔ∏è Structure SQL principale :

```sql
CREATE TABLE absences_enseignants (
  id SERIAL PRIMARY KEY,
  enseignant_id INTEGER REFERENCES enseignants(id),
  date_absence DATE,
  heure_debut TIME,
  heure_fin TIME,
  motif TEXT,
  justificatif TEXT,
  valide BOOLEAN DEFAULT FALSE,
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE remplacements (
  id SERIAL PRIMARY KEY,
  absence_id INTEGER REFERENCES absences_enseignants(id),
  rempla√ßant_id INTEGER REFERENCES enseignants(id),
  valide BOOLEAN DEFAULT FALSE,
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üîπ 18.2 G√©n√©ration de documents administratifs dynamiques

### üéØ Objectif :

Offrir une interface d‚Äôadministration permettant de **g√©n√©rer des documents officiels dynamiques** (PDF) bas√©s sur des mod√®les avec insertion automatique de donn√©es (√©l√®ve, enseignant, p√©riode, classe‚Ä¶).

---

### üîß Fonctionnalit√©s principales :

#### üß© Types de documents pris en charge :

* Demande d‚Äôinscription
* Demande de cong√© enseignant
* Convention parentale
* Rapport d‚Äôincident
* Fiche d‚Äôengagement
* PV de conseil de classe
* Attestations internes

#### ‚úèÔ∏è Cr√©ation de mod√®les dynamiques :

* Utilisation de balises dynamiques (`{{nom}}`, `{{classe}}`, `{{date_naissance}}`)
* Editeur visuel WYSIWYG
* Gestion multi-langue

#### üì§ Utilisation :

* S√©lection du type de document
* Pr√©-remplissage automatique via ID (apprenant, enseignant‚Ä¶)
* T√©l√©chargement, impression ou envoi par email

#### üì¶ Historique :

* Liste de tous les documents g√©n√©r√©s
* Archivage automatique dans le dossier de l‚Äôutilisateur (√©l√®ve/enseignant)

---

### üóÉÔ∏è Structure SQL principale :

```sql
CREATE TABLE modeles_documents (
  id SERIAL PRIMARY KEY,
  nom_modele VARCHAR(100),
  contenu_html TEXT,
  type_modele VARCHAR(50), -- ex: "Inscription", "Attestation", ...
  langue VARCHAR(10),
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE documents_generes (
  id SERIAL PRIMARY KEY,
  modele_id INTEGER REFERENCES modeles_documents(id),
  cible_type VARCHAR(20), -- "apprenant", "enseignant", etc.
  cible_id INTEGER,
  contenu_final TEXT,
  fichier_pdf TEXT,
  date_generation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  genere_par INTEGER REFERENCES utilisateurs(id)
);
```

---

### üîê S√©curit√© et permissions :

* Droits modulables par r√¥le (ex : seuls les responsables peuvent cr√©er des mod√®les)
* Historique de g√©n√©ration consultable uniquement par utilisateurs autoris√©s
* Signature num√©rique optionnelle et QR code de v√©rification

---

Voici le **Module 19 : Suivi psychop√©dagogique des √©l√®ves**, d√©taill√© pas √† pas pour une mise en ≈ìuvre directe par un d√©veloppeur.

---

# üß† Module 19 : Suivi psychop√©dagogique des √©l√®ves

---

## üéØ Objectif g√©n√©ral :

Offrir un espace s√©curis√© et confidentiel pour le **suivi psychologique, p√©dagogique et comportemental** des √©l√®ves, permettant aux encadreurs (psychologues scolaires, √©ducateurs, conseillers d‚Äôorientation, surveillants) de consigner des observations, proposer des actions correctives, assurer un accompagnement individualis√©, et suivre l‚Äô√©volution globale de chaque apprenant.

---

## üîß Fonctionnalit√©s d√©taill√©es :

### 1. **Cr√©ation de profils de suivi psychop√©dagogique**

* Chaque √©l√®ve poss√®de un profil de suivi consultable uniquement par les personnels autoris√©s (psychologues, surveillants, enseignants, administration).
* Affichage :

  * Informations de base de l‚Äô√©l√®ve
  * Historique des interventions
  * Synth√®se des besoins √©ducatifs particuliers
  * Recommandations en cours

### 2. **Observations psychop√©dagogiques**

* Possibilit√© d‚Äôenregistrer des observations ponctuelles ou r√©guli√®res sur :

  * √âtat √©motionnel ou psychologique
  * Comportement social
  * Attitudes en classe
  * Troubles d‚Äôapprentissage suspect√©s
* Observations associ√©es √† une date, √† un auteur, et √† une cat√©gorie.

### 3. **Plans d‚Äôaccompagnement individualis√© (PAI)**

* Possibilit√© de cr√©er un **plan d‚Äôaccompagnement** avec :

  * Objectifs sp√©cifiques
  * Actions pr√©vues (accompagnement, tutorat, soutien psychologique, aide m√©thodologique)
  * Dur√©e et √©ch√©ances
  * Intervenants d√©sign√©s

### 4. **Rendez-vous de suivi**

* Prise de rendez-vous entre les √©l√®ves, leurs parents et les professionnels :

  * Notifications envoy√©es
  * Historique des s√©ances
  * Compte rendu joint √† chaque s√©ance

### 5. **Fiches d‚Äôincidents & interventions disciplinaires**

* Int√©gration des incidents disciplinaires graves n√©cessitant une observation psychop√©dagogique.
* Possibilit√© de lier l‚Äôincident √† une recommandation psychop√©dagogique.

### 6. **Confidentialit√© et droits d‚Äôacc√®s**

* Visibilit√© r√©serv√©e aux personnels habilit√©s :

  * Conseillers d‚Äôorientation
  * Psychologues
  * Responsables p√©dagogiques
  * Chef d‚Äô√©tablissement
* Historique des consultations

---

## üìò Exemples d‚Äôusage :

* √âl√®ve montrant des signes de d√©crochage ‚Üí cr√©ation d‚Äôun PAI avec un plan de soutien + suivi hebdomadaire.
* √âl√®ve ayant un trouble de comportement en classe ‚Üí observation + fiche incident + r√©union avec parents.

---

## üóÉÔ∏è Structure SQL propos√©e :

```sql
CREATE TABLE suivis_psychopedagogiques (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  auteur_id INTEGER REFERENCES utilisateurs(id),
  titre VARCHAR(255),
  commentaire TEXT,
  type_suivi VARCHAR(50), -- "Observation", "Incident", "Entretien", "PAI", etc.
  visible_par TEXT[] -- liste des r√¥les autoris√©s : ex ['psychologue', 'responsable', 'enseignant']
);

CREATE TABLE plans_accompagnement (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  date_debut DATE,
  date_fin DATE,
  objectifs TEXT,
  actions_prevues TEXT,
  intervenants TEXT,
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE rdv_psychopedagogiques (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  intervenant_id INTEGER REFERENCES utilisateurs(id),
  date_rdv TIMESTAMP,
  lieu VARCHAR(100),
  compte_rendu TEXT,
  statut VARCHAR(30) DEFAULT 'pr√©vu', -- pr√©vu / termin√© / annul√©
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE incidents_comportementaux (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  date_incident DATE,
  type_incident VARCHAR(100),
  description TEXT,
  mesures_prises TEXT,
  lie_a_suivi BOOLEAN DEFAULT FALSE,
  auteur_id INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üîê S√©curit√© :

* **Acc√®s par r√¥le dynamique** : seules les personnes habilit√©es peuvent consulter ou ajouter des donn√©es.
* Toutes les donn√©es sont **historis√©es et sign√©es** num√©riquement.
* RGPD respect√© : consentement parental requis pour certains types de suivis.

---

## üìä Statistiques (optionnel) :

* Nombre d‚Äô√©l√®ves suivis
* R√©partition par type de troubles ou besoins
* √âvolution des suivis dans le temps
* Taux de r√©ussite des plans d‚Äôaccompagnement

---

Voici la d√©finition d√©taill√©e du **Module 20 : √âv√©nements scolaires et r√©unions**, pr√™t √† √™tre compris et utilis√© par un d√©veloppeur pour l‚Äôimpl√©mentation du syst√®me.

---

# üìÖ Module 20 : √âv√©nements scolaires et r√©unions

---

## üéØ Objectif g√©n√©ral :

Permettre √† l‚Äô√©tablissement de planifier, g√©rer et suivre les **√©v√©nements scolaires** (c√©r√©monies, excursions, journ√©es portes ouvertes‚Ä¶) ainsi que les **r√©unions p√©dagogiques ou administratives**, avec notifications, gestion des pr√©sences, documents li√©s et suivi des d√©cisions.

---

## üîß Fonctionnalit√©s d√©taill√©es :

### 1. **Cr√©ation et planification des √©v√©nements**

* Types d‚Äô√©v√©nements :

  * **√âv√©nements scolaires** : f√™tes, comp√©titions, sorties √©ducatives, campagnes de sensibilisation, remises de prix‚Ä¶
  * **R√©unions** : conseils de classe, r√©unions de parents, r√©unions p√©dagogiques, assembl√©es g√©n√©rales.
* Donn√©es √† renseigner :

  * Titre de l‚Äô√©v√©nement
  * Type d‚Äô√©v√©nement
  * Date et heure de d√©but / de fin
  * Lieu
  * Description
  * Participants cibl√©s (tous, enseignants, parents, classes sp√©cifiques, personnels, etc.)
  * Documents associ√©s (ordre du jour, invitations‚Ä¶)

### 2. **Syst√®me d'invitation et notifications**

* Envoi automatique d‚Äôinvitations (email, notification interne, SMS selon configuration)
* Confirmation de participation (pour les r√©unions)
* Rappels automatis√©s √† l‚Äôapproche de l‚Äô√©v√©nement

### 3. **Suivi des pr√©sences**

* Liste des participants
* Enregistrement de la **pr√©sence / absence** (manuellement ou via QR code)
* Motif d‚Äôabsence s‚Äôil y a lieu

### 4. **Comptes rendus et d√©cisions**

* Apr√®s la r√©union :

  * Saisie ou importation d‚Äôun **compte rendu**
  * Enregistrement des **r√©solutions prises**, assignation √† des responsables
  * Suivi des actions d√©cid√©es dans les r√©unions (√©tat : en attente, en cours, termin√©)

### 5. **Affichage public (optionnel)**

* Calendrier interactif ou fil des √©v√©nements visibles :

  * Sur le portail web de l‚Äô√©tablissement
  * Par classe ou r√¥le (parents, √©l√®ves, enseignants, etc.)

---

## üìò Exemple d‚Äôusage :

* Le directeur planifie la **r√©union de rentr√©e des parents**.
* Les parents re√ßoivent un SMS et une notification interne.
* Le jour J, les pr√©sences sont enregistr√©es.
* Un **compte rendu PDF** est ajout√©, avec une r√©solution assign√©e √† l‚Äôadministration pour imprimer les carnets de liaison.

---

## üóÉÔ∏è Structure SQL propos√©e :

```sql
CREATE TABLE evenements (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(255),
  type_evenement VARCHAR(100), -- Ex: "R√©union", "Sortie", "C√©r√©monie", "Comp√©tition"
  description TEXT,
  date_debut TIMESTAMP,
  date_fin TIMESTAMP,
  lieu VARCHAR(255),
  cible_participation TEXT, -- ex: "tous", "parents", "enseignants", "classe:4eA"
  document_joint VARCHAR(255), -- lien vers fichier PDF, ordre du jour, etc.
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE participants_evenement (
  id SERIAL PRIMARY KEY,
  evenement_id INTEGER REFERENCES evenements(id),
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  statut_participation VARCHAR(30) DEFAULT 'non confirm√©', -- confirm√© / annul√© / non confirm√©
  presence BOOLEAN DEFAULT FALSE,
  motif_absence TEXT
);

CREATE TABLE comptes_rendus_evenement (
  id SERIAL PRIMARY KEY,
  evenement_id INTEGER REFERENCES evenements(id),
  auteur_id INTEGER REFERENCES utilisateurs(id),
  compte_rendu TEXT,
  document_pdf VARCHAR(255),
  date_soumission TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE decisions_evenement (
  id SERIAL PRIMARY KEY,
  evenement_id INTEGER REFERENCES evenements(id),
  description TEXT,
  responsable_id INTEGER REFERENCES utilisateurs(id),
  etat VARCHAR(30) DEFAULT 'en attente', -- en attente / en cours / termin√©
  date_echeance DATE
);
```

---

## üîê S√©curit√© :

* Cr√©ation / √©dition r√©serv√©e aux r√¥les autoris√©s (administrateurs, chefs d‚Äô√©tablissement, coordinateurs)
* Lecture des √©v√©nements filtr√©e selon le r√¥le et la classe de l‚Äôutilisateur
* Tous les documents li√©s sont stock√©s de mani√®re s√©curis√©e et journalis√©e

---

## üìä Statistiques :

* Taux de participation par type d‚Äô√©v√©nement
* R√©partition des absences par classe ou r√¥le
* Nombre de d√©cisions prises et suivies

---

## üì≤ Int√©grations :

* **Calendrier global** de l‚Äô√©tablissement
* **Syst√®me de messagerie et notification**
* **Portail parent/√©l√®ve/enseignant** pour consulter les √©v√©nements

---

Parfait. Voici une **sp√©cification d√©taill√©e du Module 21 : e-Learning**, enti√®rement con√ßu pour √™tre impl√©ment√© par des d√©veloppeurs avec clart√©, en coh√©rence avec les autres modules de votre syst√®me de gestion scolaire.

---

# üéì Module 21 : e-Learning (cours en ligne, devoirs, supports, quiz)

---

## üéØ Objectif g√©n√©ral :

Permettre aux enseignants de publier du contenu p√©dagogique en ligne et aux √©l√®ves d‚Äôy acc√©der, de soumettre des devoirs, passer des quiz, et suivre leur progression. Ce module renforce l‚Äôapprentissage hybride ou 100% √† distance.

---

## üîß Fonctionnalit√©s d√©taill√©es :

### 1. **Espace de cours en ligne par mati√®re**

* Cr√©ation de **contenus p√©dagogiques** par les enseignants :

  * Titres, descriptions
  * Supports : PDF, vid√©o, audio, PowerPoint, liens externes
  * T√©l√©chargement de fichiers
  * Ajout de **tags / mots-cl√©s**
* Organisation par mati√®re, classe et semaine
* Suivi des acc√®s des √©l√®ves (consultation, t√©l√©chargement)

### 2. **Devoirs / Travaux dirig√©s**

* Cr√©ation de devoirs :

  * √ânonc√©, description
  * Fichiers joints (exercices, consignes‚Ä¶)
  * Date limite de soumission
* Envoi de notifications automatiques aux √©l√®ves
* Soumission de devoirs :

  * T√©l√©versement de fichiers par les √©l√®ves (PDF, Word, images, ZIP‚Ä¶)
  * Texte libre (√©diteur WYSIWYG)
* Correction :

  * Note attribu√©e
  * Commentaire du correcteur
  * Possibilit√© de renvoyer un devoir (optionnelle)

### 3. **Quiz / QCM**

* Cr√©ation de quiz par les enseignants :

  * Questions √† choix multiples (QCM)
  * R√©ponses √† texte libre (optionnel)
  * Dur√©e limite, nombre de tentatives
* Param√®tres :

  * Al√©atoire ou non
  * Visible pour une p√©riode donn√©e
  * R√©sultat affich√© automatiquement ou apr√®s validation
* R√©sultats et feedbacks visibles par l‚Äô√©l√®ve
* Tableau de bord de performance

### 4. **Progression de l‚Äô√©l√®ve**

* Suivi individuel :

  * Nombre de supports consult√©s
  * Devoirs soumis / corrig√©s
  * Quiz pass√©s / scores
* Visualisation sous forme de tableau ou graphe pour enseignants, √©l√®ves et parents

---

## üìò Cas d‚Äôusage :

1. **Un enseignant de SVT cr√©e un cours avec une vid√©o et un PDF** sur le cycle de reproduction des plantes.
2. Il programme un **devoir** √† remettre sous 7 jours.
3. Les √©l√®ves re√ßoivent une **notification**.
4. Chaque √©l√®ve soumet un **fichier Word** avec ses r√©ponses.
5. L‚Äôenseignant corrige les devoirs et attribue une note + feedback.
6. Un **quiz** est publi√© pour valider les acquis.
7. Les parents et les √©l√®ves peuvent consulter la **progression** depuis leur espace.

---

## üóÉÔ∏è Structure SQL propos√©e :

```sql
CREATE TABLE cours_en_ligne (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(255),
  description TEXT,
  classe_id INTEGER REFERENCES classes(id),
  matiere_id INTEGER REFERENCES matieres(id),
  enseignant_id INTEGER REFERENCES utilisateurs(id),
  date_publication TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE supports_cours (
  id SERIAL PRIMARY KEY,
  cours_id INTEGER REFERENCES cours_en_ligne(id),
  type_support VARCHAR(50), -- 'pdf', 'video', 'lien', 'audio', etc.
  titre VARCHAR(255),
  url_fichier TEXT,
  ordre_affichage INTEGER
);

CREATE TABLE devoirs (
  id SERIAL PRIMARY KEY,
  cours_id INTEGER REFERENCES cours_en_ligne(id),
  titre VARCHAR(255),
  instructions TEXT,
  date_limite TIMESTAMP,
  fichier_joint VARCHAR(255)
);

CREATE TABLE soumissions_devoirs (
  id SERIAL PRIMARY KEY,
  devoir_id INTEGER REFERENCES devoirs(id),
  apprenant_id INTEGER REFERENCES apprenants(id),
  fichier_soumis VARCHAR(255),
  commentaire_apprenant TEXT,
  date_soumission TIMESTAMP,
  note NUMERIC(5,2),
  commentaire_correction TEXT
);

CREATE TABLE quiz (
  id SERIAL PRIMARY KEY,
  cours_id INTEGER REFERENCES cours_en_ligne(id),
  titre VARCHAR(255),
  description TEXT,
  duree_minutes INTEGER,
  visible_de TIMESTAMP,
  visible_jusquau TIMESTAMP,
  tentative_max INTEGER
);

CREATE TABLE questions (
  id SERIAL PRIMARY KEY,
  quiz_id INTEGER REFERENCES quiz(id),
  type_question VARCHAR(50), -- 'qcm', 'texte'
  question TEXT,
  bonne_reponse TEXT,
  choix_1 TEXT,
  choix_2 TEXT,
  choix_3 TEXT,
  choix_4 TEXT
);

CREATE TABLE reponses_quiz (
  id SERIAL PRIMARY KEY,
  quiz_id INTEGER REFERENCES quiz(id),
  question_id INTEGER REFERENCES questions(id),
  apprenant_id INTEGER REFERENCES apprenants(id),
  reponse TEXT,
  est_correct BOOLEAN,
  date_reponse TIMESTAMP
);
```

---

## üì≤ Interfaces pr√©vues :

* **Espace enseignant** :

  * Cr√©er / publier cours
  * Ajouter supports / devoirs / quiz
  * Corriger et commenter
* **Espace apprenant** :

  * Visualiser contenu par classe/mati√®re
  * Soumettre devoirs / passer quiz
  * Suivre progression
* **Espace parent** :

  * Consulter progression globale

---

## üìä Statistiques :

* Taux de compl√©tion des cours
* Moyenne des notes par mati√®re
* Participation par √©l√®ve / classe
* Temps pass√© sur chaque ressource

---

## üîê S√©curit√© :

* Acc√®s s√©curis√© selon les r√¥les
* Fichiers chiffr√©s / prot√©g√©s
* V√©rification des dates limites, tentatives
* Journaux d‚Äôactivit√©s (logs)

---

Tr√®s bien. Voici la **sp√©cification compl√®te et d√©taill√©e du Module 22 : Gestion des clubs scolaires, cantine, internat et projets p√©dagogiques**, avec une structure exploitable directement par les d√©veloppeurs (base de donn√©es, logique m√©tier, cas d‚Äôusage, r√¥les, s√©curit√©).

---

# üéì Module 22 : Gestion des clubs scolaires, cantine, internat et projets p√©dagogiques

---

## üéØ Objectif g√©n√©ral :

Mettre en place un ensemble de sous-syst√®mes compl√©mentaires facilitant la vie scolaire au-del√† des cours acad√©miques : gestion des clubs (sports, culture‚Ä¶), de la cantine, de l‚Äôinternat, et des projets p√©dagogiques ou parascolaires.

---

## üß© Sous-modules

---

### **1. Gestion des clubs scolaires**

#### üìå Fonctionnalit√©s :

* Cr√©ation de clubs (nom, type, description)
* Attribution d‚Äôun encadreur ou r√©f√©rent (enseignant ou personnel)
* Inscription des √©l√®ves
* Planification d‚Äôactivit√©s ou d‚Äô√©v√©nements
* Suivi de la participation des membres
* Archivage annuel des activit√©s

#### üéØ Cas d‚Äôusage :

* Le club de th√©√¢tre cr√©e un spectacle en fin de trimestre.
* L‚Äô√©l√®ve se connecte, consulte les clubs disponibles, s‚Äôinscrit.
* L‚Äôencadreur valide et g√®re la liste des membres.

#### üìÑ Tables SQL :

```sql
CREATE TABLE clubs (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100),
  type_club VARCHAR(100), -- Sport, Art, Culture, Environnement, etc.
  description TEXT,
  encadreur_id INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE membres_clubs (
  id SERIAL PRIMARY KEY,
  club_id INTEGER REFERENCES clubs(id),
  apprenant_id INTEGER REFERENCES apprenants(id),
  date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  actif BOOLEAN DEFAULT TRUE
);

CREATE TABLE activites_club (
  id SERIAL PRIMARY KEY,
  club_id INTEGER REFERENCES clubs(id),
  titre VARCHAR(255),
  description TEXT,
  date_activite DATE
);
```

---

### **2. Gestion de la cantine**

#### üìå Fonctionnalit√©s :

* D√©finir des **menus par jour / semaine**
* Gestion des inscriptions √† la cantine (par trimestre ou mensuellement)
* Paiement des frais de cantine
* Suivi de la fr√©quentation quotidienne
* Gestion des r√©gimes sp√©ciaux (allergies, menus halal, etc.)

#### üéØ Cas d‚Äôusage :

* L‚Äô√©l√®ve ou son parent s‚Äôinscrit √† la cantine pour la p√©riode de janvier √† mars.
* Le chef cuisinier publie les menus de la semaine.
* L‚Äôagent enregistre la pr√©sence √† la cantine chaque midi.

#### üìÑ Tables SQL :

```sql
CREATE TABLE cantine_inscriptions (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  periode VARCHAR(100), -- exemple : "Trimestre 1 2025"
  date_inscription DATE,
  paye BOOLEAN DEFAULT FALSE
);

CREATE TABLE cantine_menus (
  id SERIAL PRIMARY KEY,
  date_service DATE,
  plat_principal VARCHAR(255),
  accompagnement VARCHAR(255),
  dessert VARCHAR(255),
  boisson VARCHAR(255),
  remarque TEXT
);

CREATE TABLE cantine_presence (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  date DATE,
  present BOOLEAN
);
```

---

### **3. Gestion de l‚Äôinternat**

#### üìå Fonctionnalit√©s :

* Enregistrement des internes (√©l√®ves h√©berg√©s)
* Attribution des chambres / lits
* Suivi des absences / retards / permissions de sortie
* Gestion des frais d‚Äôinternat
* Suivi des r√©parations ou incidents dans les dortoirs

#### üéØ Cas d‚Äôusage :

* Un √©l√®ve est assign√© √† la chambre 204, lit 3.
* Il demande une sortie temporaire pour le weekend.
* Le responsable valide et enregistre son retour.

#### üìÑ Tables SQL :

```sql
CREATE TABLE dortoirs (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100),
  genre VARCHAR(10), -- Masculin, F√©minin
  capacite INTEGER
);

CREATE TABLE lits (
  id SERIAL PRIMARY KEY,
  dortoir_id INTEGER REFERENCES dortoirs(id),
  numero_lit INTEGER,
  disponible BOOLEAN DEFAULT TRUE
);

CREATE TABLE internes (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  lit_id INTEGER REFERENCES lits(id),
  date_entree DATE,
  date_sortie_prevue DATE,
  remarque TEXT
);

CREATE TABLE permissions_sortie (
  id SERIAL PRIMARY KEY,
  interne_id INTEGER REFERENCES internes(id),
  date_sortie DATE,
  date_retour_prevue DATE,
  date_retour_reelle DATE,
  motif TEXT,
  valide BOOLEAN DEFAULT FALSE
);
```

---

### **4. Projets p√©dagogiques / projets de classe**

#### üìå Fonctionnalit√©s :

* Cr√©ation de projets par les enseignants ou encadreurs
* Association √† une classe, un niveau ou une mati√®re
* Suivi des livrables, √©ch√©ances, participants
* Suivi budg√©taire (si applicable)
* Rapport de projet et archivage

#### üéØ Cas d‚Äôusage :

* Une classe terminale monte un projet sur l‚Äôagriculture bio.
* L‚Äôenseignant encadrant suit l‚Äôavancement et valide les √©tapes.

#### üìÑ Tables SQL :

```sql
CREATE TABLE projets_pedagogiques (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(255),
  description TEXT,
  classe_id INTEGER REFERENCES classes(id),
  enseignant_id INTEGER REFERENCES utilisateurs(id),
  date_debut DATE,
  date_fin_prevue DATE,
  budget_estime NUMERIC(10,2)
);

CREATE TABLE participants_projet (
  id SERIAL PRIMARY KEY,
  projet_id INTEGER REFERENCES projets_pedagogiques(id),
  apprenant_id INTEGER REFERENCES apprenants(id),
  role_participant VARCHAR(100) -- coordinateur, membre, rapporteur‚Ä¶
);

CREATE TABLE livrables_projet (
  id SERIAL PRIMARY KEY,
  projet_id INTEGER REFERENCES projets_pedagogiques(id),
  titre VARCHAR(255),
  date_echeance DATE,
  statut VARCHAR(50), -- En cours, termin√©, en retard
  fichier_joint VARCHAR(255)
);
```

---

## üë• R√¥les et autorisations

| R√¥le                   | Acc√®s clubs                  | Cantine                           | Internat       | Projets p√©dagogiques |
| ---------------------- | ---------------------------- | --------------------------------- | -------------- | -------------------- |
| Administrateur g√©n√©ral | ‚úÖ Complet                    | ‚úÖ Complet                         | ‚úÖ Complet      | ‚úÖ Complet            |
| Responsable cantine    | ‚ùå                            | ‚úÖ Complet                         | ‚ùå              | ‚ùå                    |
| Surveillant internat   | ‚ùå                            | ‚ùå                                 | ‚úÖ Complet      | ‚ùå                    |
| Enseignant encadrant   | ‚úÖ G√®re ses clubs             | ‚ùå                                 | ‚ùå              | ‚úÖ G√®re ses projets   |
| Parent / √âl√®ve         | ‚úÖ Consultation + inscription | ‚úÖ Consultation menus, inscription | ‚úÖ Consultation | ‚úÖ Visualisation      |

---

## üîê S√©curit√© & journaux :

* Journalisation de toutes les inscriptions / d√©sinscriptions
* Signature √©lectronique pour les permissions de sortie
* Export PDF des menus, fiches projets, rapports clubs
* Notifications (email/app) pour √©ch√©ances de projets ou repas sp√©ciaux

---

Tr√®s bien, voici la **sp√©cification compl√®te du Module 23 : RGPD et journal d‚Äôaudit p√©dagogique**, int√©grant la conformit√© r√©glementaire (notamment RGPD) et la tra√ßabilit√© p√©dagogique, avec des **tables SQL**, des **cas d‚Äôusage**, une **logique m√©tier claire** et des **r√¥les**.

---

# üìò Module 23 : RGPD et journal d‚Äôaudit p√©dagogique

---

## üéØ Objectifs

1. **Assurer la conformit√© avec le RGPD** (R√®glement G√©n√©ral sur la Protection des Donn√©es) : traitement, consentement, droit √† l'oubli, minimisation.
2. **Mettre en place une tra√ßabilit√© p√©dagogique** : qui a modifi√© quoi, quand, et sur quelle donn√©e.
3. **Fournir des outils d‚Äôaudit internes et externes** sur les donn√©es sensibles, les √©valuations, les pr√©sences, et plus.

---

## üõ°Ô∏è 1. **Conformit√© RGPD**

### üîç Principes appliqu√©s :

* Minimisation des donn√©es (on ne stocke que ce qui est n√©cessaire)
* Consentement explicite des utilisateurs (parents, √©l√®ves, employ√©s)
* Droit d‚Äôacc√®s, de rectification, d‚Äôexport, et d‚Äôeffacement
* P√©rim√®tre des donn√©es sensibles : sant√©, religion, identit√©, photo, statut social, etc.

### üìå Fonctionnalit√©s :

* Journal des consentements (signature √©lectronique, opt-in/opt-out)
* Interface de demande d‚Äôacc√®s ou suppression des donn√©es personnelles
* Masquage ou anonymisation des anciens √©l√®ves apr√®s archivage
* G√©n√©ration de rapport RGPD √† destination des autorit√©s

### üóÉÔ∏è Tables SQL :

```sql
CREATE TABLE rgpd_consentements (
  id SERIAL PRIMARY KEY,
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  type_consentement VARCHAR(100), -- "stockage_photo", "notifications", etc.
  donne_consentement BOOLEAN,
  date_consentement TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ip_address VARCHAR(45)
);

CREATE TABLE rgpd_demandes (
  id SERIAL PRIMARY KEY,
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  type_demande VARCHAR(100), -- "acces", "rectification", "effacement", "export"
  statut VARCHAR(50) DEFAULT 'En attente', -- Trait√©e, Rejet√©e
  commentaire TEXT,
  date_demande TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  date_traitement TIMESTAMP
);
```

---

## üìã 2. Journal d‚Äôaudit p√©dagogique

### üìå Fonctionnalit√©s :

* Enregistrer toutes les actions sensibles (ajout de note, changement de pr√©sence, mise √† jour d‚Äôun bulletin, modification de donn√©es financi√®res, etc.)
* Suivi des connexions / d√©connexions / acc√®s √† certaines donn√©es sensibles
* Suivi des enseignants dans leurs √©valuations
* Export PDF ou CSV des logs √† tout moment

### üéØ Cas d‚Äôusage :

* Un administrateur veut savoir **qui a modifi√© la note de l‚Äô√©l√®ve X** en math√©matiques.
* Le directeur v√©rifie **la r√©gularit√© d‚Äôun enseignant** dans la correction des devoirs.
* L‚Äô√©tablissement prouve aux parents **qu‚Äôaucune donn√©e personnelle n‚Äôa √©t√© modifi√©e sans trace.**

### üóÉÔ∏è Tables SQL :

```sql
CREATE TABLE journal_audit (
  id SERIAL PRIMARY KEY,
  utilisateur_id INTEGER REFERENCES utilisateurs(id),
  action VARCHAR(255), -- "Ajout note", "Suppression √©l√®ve", etc.
  module VARCHAR(100), -- "Bulletin", "Pr√©sence", "Finance"
  cible_type VARCHAR(100), -- Table concern√©e : "eleves", "evaluations"
  cible_id INTEGER, -- ID de l'√©l√©ment modifi√©
  valeur_avant TEXT,
  valeur_apres TEXT,
  date_action TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ip_address VARCHAR(45),
  navigateur TEXT
);

CREATE INDEX idx_journal_module ON journal_audit(module, cible_type, cible_id);
```

---

## üë• R√¥les et autorisations

| R√¥le                                    | Acc√®s au journal d‚Äôaudit          | RGPD - Export / Suppression | Consultation consentement |
| --------------------------------------- | --------------------------------- | --------------------------- | ------------------------- |
| Administrateur g√©n√©ral                  | ‚úÖ Complet                         | ‚úÖ Complet                   | ‚úÖ                         |
| Responsable RGPD                        | ‚úÖ Complet                         | ‚úÖ Complet                   | ‚úÖ                         |
| Utilisateur (parent, √©l√®ve, enseignant) | ‚ùå (sauf pour ses propres actions) | ‚úÖ (via formulaire)          | ‚úÖ                         |

---

## üîê S√©curit√© renforc√©e

* **Logs immuables** : impossibilit√© de modifier un journal une fois cr√©√©
* **Chiffrement des valeurs sensibles**
* **Double authentification recommand√©e** pour l‚Äôacc√®s au module RGPD
* **Sauvegardes crypt√©es r√©guli√®res** des logs RGPD

---

## üì§ Exports et rapports

* Export RGPD au format JSON ou PDF
* Rapport journalier / hebdo / mensuel des actions critiques
* Filtrage par utilisateur, module, date, action
* Export automatique pour les audits

---

## üì± Interfaces recommand√©es

* üßë‚Äçüéì **Parent / √âl√®ve** :

  * Voir ses consentements RGPD
  * Demander l‚Äôeffacement / export
* üë®‚Äçüè´ **Personnel p√©dagogique** :

  * Visualiser ses propres actions p√©dagogiques
* üõ°Ô∏è **Administrateur / Responsable RGPD** :

  * Tableaux de bord
  * Filtres multi-crit√®res
  * Rapport RGPD automatis√©

---

Parfait‚ÄØ! Voici la **sp√©cification compl√®te du Module 24 : Gestion des partenariats, sponsors et relations externes**, comme les **ONG, minist√®res, m√©c√®nes, associations, entreprises partenaires**, etc.

---

# üìò Module 24 : Gestion des partenariats, sponsors et relations externes

---

## üéØ Objectifs

1. G√©rer les partenaires officiels de l‚Äô√©tablissement (ONG, entreprises, institutions publiques ou priv√©es)
2. Suivre les contrats de partenariat (dur√©e, objectifs, engagements, contributions)
3. Assurer le suivi des dons, financements, subventions ou soutiens mat√©riels
4. Mesurer l‚Äôimpact p√©dagogique, social ou financier de ces partenariats
5. Faciliter la communication institutionnelle avec les partenaires

---

## üß± 1. Gestion des partenaires

### üìå Fonctionnalit√©s :

* Cr√©ation de fiches partenaires : nom, type, contact principal, pays, domaine d‚Äôintervention
* Types de partenaires :

  * **Institutionnels** : Minist√®re, Mairie, Rectorat
  * **ONG / Associations**
  * **Entreprises** : m√©c√®nes, sponsors
  * **Personnes physiques**
* Historique des interactions
* Documents associ√©s (protocoles d‚Äôaccord, contrats, conventions)

### üóÉÔ∏è Table SQL :

```sql
CREATE TABLE partenaires (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(255),
  type_partenaire VARCHAR(100), -- "ONG", "Entreprise", "Institution", "Individuel"
  secteur_intervention VARCHAR(255),
  pays VARCHAR(100),
  email_contact VARCHAR(255),
  telephone_contact VARCHAR(50),
  responsable_nom VARCHAR(255),
  date_debut_collab DATE,
  statut VARCHAR(50) DEFAULT 'Actif', -- "Actif", "Suspendu", "Termin√©"
  commentaire TEXT
);
```

---

## üìÑ 2. Suivi des conventions et engagements

### üìå Fonctionnalit√©s :

* Enregistrement des conventions ou contrats associ√©s
* Suivi des √©ch√©ances, renouvellements et alertes automatiques
* Engagements bilat√©raux :

  * C√¥t√© partenaire : dons, interventions, mat√©riel, bourses
  * C√¥t√© √©tablissement : communication, rapports, r√©sultats

### üóÉÔ∏è Tables SQL :

```sql
CREATE TABLE conventions_partenaire (
  id SERIAL PRIMARY KEY,
  partenaire_id INTEGER REFERENCES partenaires(id),
  titre_convention VARCHAR(255),
  date_signature DATE,
  date_expiration DATE,
  objet TEXT,
  engagements_etablissement TEXT,
  engagements_partenaire TEXT,
  fichier_convention VARCHAR(255), -- chemin vers document PDF
  statut VARCHAR(50) DEFAULT 'En cours'
);
```

---

## üéÅ 3. Gestion des dons, financements, soutiens

### üìå Fonctionnalit√©s :

* Enregistrement des apports mat√©riels ou financiers (bourses, √©quipements, fournitures)
* Attribution des dons √† une activit√© (projet p√©dagogique, aide sociale, infrastructure)
* Historique et tra√ßabilit√© des dons
* G√©n√©ration de re√ßus, rapports, et bilans

### üóÉÔ∏è Table SQL :

```sql
CREATE TABLE dons_partenaires (
  id SERIAL PRIMARY KEY,
  partenaire_id INTEGER REFERENCES partenaires(id),
  date_don DATE,
  type_don VARCHAR(100), -- "Financier", "Mat√©riel", "Service"
  montant NUMERIC(12, 2),
  description TEXT,
  affectation VARCHAR(255), -- "Cantine", "Bourses", "√âquipement informatique"
  justificatif_document VARCHAR(255),
  utilisateur_enregistrement INTEGER REFERENCES utilisateurs(id)
);
```

---

## üìä 4. Indicateurs et suivi d‚Äôimpact

### üìå Fonctionnalit√©s :

* Rapport par partenaire : apports, dur√©e, fr√©quence
* Cartographie des partenariats (g√©olocalisation possible)
* Suivi des r√©sultats attendus par projet ou convention
* Mesure d‚Äôimpact p√©dagogique ou social (ex. : nombre d‚Äô√©l√®ves b√©n√©ficiaires)

### üóÉÔ∏è Table SQL (simplifi√©e) :

```sql
CREATE TABLE impact_partenariats (
  id SERIAL PRIMARY KEY,
  partenaire_id INTEGER REFERENCES partenaires(id),
  convention_id INTEGER REFERENCES conventions_partenaire(id),
  indicateur VARCHAR(255),
  valeur_attendue TEXT,
  valeur_reelle TEXT,
  date_suivi DATE,
  commentaire TEXT
);
```

---

## üì¢ 5. Communication institutionnelle

### üìå Fonctionnalit√©s :

* Envoi de newsletters partenaires
* Invitations aux √©v√©nements scolaires
* Rapports PDF ou emails automatiques p√©riodiques
* Historique des √©changes et rendez-vous

---

## üë• R√¥les et autorisations

| R√¥le                       | Gestion des partenaires | Suivi dons/conventions | Rapport impact |
| -------------------------- | ----------------------- | ---------------------- | -------------- |
| Administrateur g√©n√©ral     | ‚úÖ                       | ‚úÖ                      | ‚úÖ              |
| Responsable relations ext. | ‚úÖ                       | ‚úÖ                      | ‚úÖ              |
| Gestionnaire financier     | üîç Lecture seule        | ‚úÖ                      | üîç Lecture     |
| Enseignant / parent        | ‚ùå                       | ‚ùå                      | ‚ùå              |

---

## üîê S√©curit√© & conformit√©

* Suivi des actions sensibles dans le **journal d‚Äôaudit** (Module 23)
* Permissions strictes selon r√¥le
* Possibilit√© d'anonymiser les partenaires sur demande RGPD

---

## üì§ API REST & Export

* CRUD pour chaque table
* Recherche filtr√©e : nom, type, date convention, impact
* Export PDF / Excel des conventions ou dons
* Int√©gration possible avec le module **comptabilit√©**

---


Parfait‚ÄØ! Voici la **sp√©cification compl√®te du Module 25 : Gestion des stages, immersions professionnelles et concours scolaires**. Ce module permet √† l‚Äô√©tablissement de suivre les parcours pratiques des apprenants, les stages obligatoires ou facultatifs, les concours acad√©miques ou techniques, et les immersions p√©dagogiques.

---

# üìò Module 25 : Gestion des stages, immersions et concours

---

## üéØ Objectifs

1. Suivre les stages scolaires, professionnels ou techniques r√©alis√©s par les apprenants
2. G√©rer les p√©riodes d‚Äôimmersion (ex. : dans des entreprises, ateliers ou institutions)
3. Enregistrer et planifier les participations √† des concours (interne, national, international)
4. √âvaluer les r√©sultats et d√©livrer des attestations ou r√©compenses
5. Faciliter la liaison avec les structures d‚Äôaccueil externes

---

## üß± 1. Gestion des stages

### üìå Fonctionnalit√©s :

* Planification des p√©riodes de stages par classe ou fili√®re
* Saisie des d√©tails du stage : entreprise, superviseur, dur√©e, domaine
* Suivi des rapports de stage (fichiers PDF, validation par encadrant)
* Historique des stages par √©l√®ve
* Notification de fin de stage, √©valuation par le tuteur
* G√©n√©ration automatique d‚Äôattestations de stage

### üóÉÔ∏è Table SQL :

```sql
CREATE TABLE stages (
  id SERIAL PRIMARY KEY,
  apprenant_id INTEGER REFERENCES apprenants(id),
  entreprise_nom VARCHAR(255),
  secteur_activite VARCHAR(255),
  responsable_nom VARCHAR(255),
  contact_responsable VARCHAR(100),
  date_debut DATE,
  date_fin DATE,
  fichier_rapport VARCHAR(255),
  evaluation TEXT,
  statut VARCHAR(50) DEFAULT 'En cours', -- "En cours", "Termin√©", "Annul√©"
  utilisateur_enregistrement INTEGER REFERENCES utilisateurs(id)
);
```

---

## üåç 2. Gestion des immersions professionnelles / p√©dagogiques

### üìå Fonctionnalit√©s :

* Planification de journ√©es ou semaines d‚Äôimmersion
* Gestion par groupe, classe ou apprenant individuel
* Association √† un domaine, objectif p√©dagogique, structure d‚Äôaccueil
* Suivi des pr√©sences et retours p√©dagogiques
* Ajout de photos, rapports, feedback de l‚Äô√©tablissement h√¥te

### üóÉÔ∏è Table SQL :

```sql
CREATE TABLE immersions (
  id SERIAL PRIMARY KEY,
  groupe_id INTEGER REFERENCES groupes(id), -- ou classe_id
  structure_accueil VARCHAR(255),
  domaine VARCHAR(255),
  responsable_accueil VARCHAR(255),
  contact_accueil VARCHAR(100),
  date_immersion DATE,
  duree_heure INTEGER,
  observations TEXT,
  fichier_feedback VARCHAR(255)
);
```

---

## üèÜ 3. Gestion des concours (internes, inter-√©coles, nationaux)

### üìå Fonctionnalit√©s :

* Enregistrement d‚Äôun concours : type, th√®me, organisateur, date
* Inscription de participants (√©l√®ves, groupes ou classes)
* Suivi des r√©sultats, classement, r√©compenses
* G√©n√©ration de certificats et rapports de participation
* Historique des concours par apprenant ou classe

### üóÉÔ∏è Tables SQL :

```sql
CREATE TABLE concours (
  id SERIAL PRIMARY KEY,
  nom_concours VARCHAR(255),
  type_concours VARCHAR(100), -- "Interne", "R√©gional", "National", "International"
  organisateur VARCHAR(255),
  date_concours DATE,
  lieu VARCHAR(255),
  theme VARCHAR(255),
  statut VARCHAR(50) DEFAULT 'Pr√©vu' -- "Pr√©vu", "Termin√©", "Annul√©"
);

CREATE TABLE participation_concours (
  id SERIAL PRIMARY KEY,
  concours_id INTEGER REFERENCES concours(id),
  apprenant_id INTEGER REFERENCES apprenants(id),
  resultat TEXT,
  classement INTEGER,
  r√©compense VARCHAR(255),
  certificat_pdf VARCHAR(255)
);
```

---

## üìä 4. Rapports et attestations

### üìå Fonctionnalit√©s :

* Rapports par √©l√®ve sur les stages, immersions et concours
* Export PDF des attestations (stage, immersion, concours)
* Rapports par ann√©e, classe, partenaire externe
* Suivi du taux de participation par activit√©

---

## üë• R√¥les et autorisations

| R√¥le                    | Stages | Immersions | Concours |
| ----------------------- | ------ | ---------- | -------- |
| Responsable p√©dagogique | ‚úÖ      | ‚úÖ          | ‚úÖ        |
| Professeur r√©f√©rent     | üîç     | üîç         | ‚úÖ        |
| Administration          | ‚úÖ      | ‚úÖ          | ‚úÖ        |
| Apprenant (via portail) | üîç     | üîç         | üîç       |

---

## üîê S√©curit√© et audit

* Tous les fichiers (rapports, certificats) stock√©s de mani√®re s√©curis√©e
* Journalisation des changements par utilisateur (via Module 23)
* Notifications aux apprenants √† chaque changement de statut

---

## üì§ API REST & Int√©gration

* API : ajout / mise √† jour des stages, concours, immersions
* T√©l√©chargement / envoi de rapports ou certificats
* Int√©gration avec :

  * **Module 2** (apprenants)
  * **Module 12** (d√©partements p√©dagogiques)
  * **Module 10** (biblioth√®que, pour joindre des rapports)
  * **Module 17** (g√©n√©ration de certificats PDF)

---

## üîÅ Suggestions d‚Äôextension

* Liaison directe avec des entreprises partenaires (Module 24)
* Formulaire de **demande de stage en ligne** avec validation par le responsable
* Gestion des **tuteurs internes** et **tuteurs externes**
* Suivi post-stage ou post-immersion : impact, insertion, retour d‚Äôexp√©rience

---
Voici la **sp√©cification compl√®te du Module 26 : Gestion des absences d‚Äôenseignants avec remplacement intelligent**, destin√© √† assurer la continuit√© p√©dagogique en cas d‚Äôabsence d‚Äôun enseignant.

---

# üìò Module 26 : Gestion des absences d‚Äôenseignants avec remplacement intelligent

---

## üéØ Objectifs

* Enregistrer et suivre les absences pr√©vues ou impr√©vues des enseignants.
* Trouver automatiquement un enseignant rempla√ßant qualifi√© et disponible.
* Alerter les parties concern√©es (administration, rempla√ßant, √©l√®ves).
* Suivre l‚Äôhistorique des remplacements et g√©n√©rer des rapports.

---

## üß± 1. Gestion des absences

### üìå Fonctionnalit√©s

* D√©claration manuelle ou automatique d‚Äôune absence (retard, cong√©, maladie‚Ä¶).
* Motif d‚Äôabsence, dur√©e, classe(s) impact√©e(s), mati√®re(s) concern√©e(s).
* Validation par l‚Äôadministration ou responsable p√©dagogique.
* Absence ponctuelle ou absence sur plusieurs jours/heures.

### üóÉÔ∏è Table SQL : `absences_enseignants`

```sql
CREATE TABLE absences_enseignants (
  id SERIAL PRIMARY KEY,
  enseignant_id INTEGER REFERENCES enseignants(id),
  date_absence DATE,
  heure_debut TIME,
  heure_fin TIME,
  motif TEXT,
  statut VARCHAR(50) DEFAULT 'En attente', -- Valid√©e, En attente, Rejet√©e
  justificatif_pdf VARCHAR(255),
  date_declaration TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## ü§ñ 2. Moteur de remplacement intelligent

### üìå Fonctionnalit√©s

* Recherche automatique d‚Äôun enseignant **disponible √† l‚Äôhoraire concern√©**.
* Priorit√© aux enseignants :

  * De la m√™me mati√®re.
  * Du m√™me d√©partement.
  * Ayant peu ou pas de surcharge horaire.
* Possibilit√© de remplacement manuel en cas d'exception.
* V√©rification des conflits d‚Äôemploi du temps.
* Propositions tri√©es par compatibilit√© et disponibilit√©.

### üóÉÔ∏è Table SQL : `remplacements`

```sql
CREATE TABLE remplacements (
  id SERIAL PRIMARY KEY,
  absence_id INTEGER REFERENCES absences_enseignants(id),
  remplacant_id INTEGER REFERENCES enseignants(id),
  classe_id INTEGER REFERENCES classes(id),
  matiere_id INTEGER REFERENCES matieres(id),
  statut_remplacement VARCHAR(50) DEFAULT 'Propos√©', -- Propos√©, Accept√©, Refus√©, Confirm√©
  date_remplacement DATE,
  heure_debut TIME,
  heure_fin TIME,
  commentaire TEXT
);
```

---

## üîÅ 3. Notifications automatiques

* Notification instantan√©e au rempla√ßant propos√©.
* Alerte √† la direction ou √† la vie scolaire.
* Notification aux √©l√®ves via la messagerie interne (Module 9) ou mobile (Module 16).
* Journalisation compl√®te (Module 23 - Journal d‚Äôaudit).

---

## üìä 4. Rapports et suivi

* Historique des absences par enseignant.
* Statistiques de remplacements : nombre, d√©lai de r√©action, remplacements automatiques vs manuels.
* Suivi de la charge horaire des rempla√ßants.

---

## üë• R√¥les et autorisations

| R√¥le                    | D√©clarer absence | G√©rer remplacement | Valider |
| ----------------------- | ---------------- | ------------------ | ------- |
| Enseignant              | ‚úÖ                | ‚ùå                  | ‚ùå       |
| Responsable p√©dagogique | üîç               | ‚úÖ                  | ‚úÖ       |
| Administrateur          | ‚úÖ                | ‚úÖ                  | ‚úÖ       |
| √âl√®ves                  | üîç (via portail) | ‚ùå                  | ‚ùå       |

---

## üîê S√©curit√©

* Justificatifs m√©dicaux ou autres stock√©s de mani√®re s√©curis√©e.
* Modifications r√©serv√©es aux administrateurs ou responsables p√©dagogiques.

---

## üîå Int√©grations

* **Module 4** : Emploi du temps (v√©rification des disponibilit√©s).
* **Module 12** : D√©partement p√©dagogique (fili√®re de remplacement).
* **Module 9 & 13** : Notifications internes et externes.
* **Module 17** : G√©n√©ration d‚Äôattestation d‚Äôabsence/remplacement.

---

## üì§ API REST (exemples)

* `POST /api/absences` : d√©clarer une absence
* `GET /api/remplacements/proposer` : g√©n√©rer proposition de remplacement
* `POST /api/remplacements/confirmer` : accepter/refuser un remplacement
* `GET /api/enseignants/disponibles` : liste dynamique pour remplacement

---

## üîÅ Suggestions √©volutives

* Ajout d‚Äôune **interface de planification intelligente** de remplacement glissant.
* Remplacement **multi-enseignant** (ex. : partage d‚Äôune heure entre deux).
* M√©canisme de **r√©compense / prime** pour enseignants ayant remplac√© r√©guli√®rement.
* √âvaluation de l'efficacit√© des remplacements par les √©l√®ves.

---

Voici la **sp√©cification compl√®te du Module 27 : Gestion des partenariats externes** (entreprises, universit√©s, ONG, institutions), destin√©e √† valoriser les collaborations √©ducatives et professionnelles de l‚Äô√©tablissement.

---

# üìò Module 27 : Gestion des partenariats externes (entreprises, universit√©s, ONG‚Ä¶)

---

## üéØ Objectifs

* Permettre √† l‚Äô√©tablissement de g√©rer les relations et collaborations avec des entit√©s externes.
* Suivre les conventions, projets, stages, dons, parrainages ou interventions.
* Mieux structurer les actions conjointes avec des partenaires professionnels, √©ducatifs ou associatifs.

---

## üß± 1. Gestion des partenaires

### üìå Fonctionnalit√©s

* Enregistrement complet d‚Äôun partenaire externe :

  * Type : Entreprise, Universit√©, ONG, Collectivit√©, Institution publique‚Ä¶
  * D√©tails de contact, secteur d‚Äôactivit√©, repr√©sentant principal.
* Gestion des statuts : actif, inactif, en discussion, en √©valuation.

### üóÉÔ∏è Table SQL : `partenaires`

```sql
CREATE TABLE partenaires (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(255) NOT NULL,
  type_partenaire VARCHAR(100), -- 'Entreprise', 'Universit√©', 'ONG', ...
  secteur_activite VARCHAR(255),
  contact_principal VARCHAR(255),
  email VARCHAR(255),
  telephone VARCHAR(50),
  site_web VARCHAR(255),
  adresse TEXT,
  statut VARCHAR(50) DEFAULT 'Actif',
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üìÑ 2. Suivi des conventions et projets

### üìå Fonctionnalit√©s

* Ajout de conventions officielles sign√©es (PDF), description du projet, dur√©e.
* Lien avec les objectifs p√©dagogiques (stages, formations, dons de mat√©riel‚Ä¶).
* Suivi des √©ch√©ances, dates de renouvellement et r√©sultats.

### üóÉÔ∏è Table SQL : `conventions_partenaire`

```sql
CREATE TABLE conventions_partenaire (
  id SERIAL PRIMARY KEY,
  partenaire_id INTEGER REFERENCES partenaires(id),
  titre VARCHAR(255),
  description TEXT,
  date_signature DATE,
  date_expiration DATE,
  fichier_convention_pdf VARCHAR(255),
  statut VARCHAR(50) DEFAULT 'Valide', -- Valide, Expir√©, En n√©gociation
  domaine_collaboration VARCHAR(255),
  responsable_interne_id INTEGER REFERENCES utilisateurs(id),
  date_enregistrement TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üë• 3. Activit√©s li√©es au partenariat

### üìå Fonctionnalit√©s

* Enregistrement des interventions, dons, formations, projets, √©v√©nements‚Ä¶
* Possibilit√© de rattacher des classes, enseignants, ou √©l√®ves √† chaque activit√©.
* Historique d√©taill√© pour chaque partenaire.

### üóÉÔ∏è Table SQL : `activites_partenaire`

```sql
CREATE TABLE activites_partenaire (
  id SERIAL PRIMARY KEY,
  convention_id INTEGER REFERENCES conventions_partenaire(id),
  type_activite VARCHAR(100), -- Intervention, Don, Formation, Stage, ...
  titre VARCHAR(255),
  description TEXT,
  date_activite DATE,
  fichier_rapport_pdf VARCHAR(255),
  observations TEXT,
  responsable_interne_id INTEGER REFERENCES utilisateurs(id)
);
```

---

## üìä 4. Statistiques & √©valuation des partenariats

* Nombre de conventions par ann√©e, par type de partenaire.
* Taux d‚Äôactivit√©s concr√®tes r√©alis√©es.
* Classement des partenaires les plus actifs.
* Suivi des partenariats en attente de renouvellement.

---

## üîê R√¥les et acc√®s

| R√¥le                    | Cr√©er partenaire | Ajouter convention | Suivre activit√© | √âvaluer |
| ----------------------- | ---------------- | ------------------ | --------------- | ------- |
| Responsable Partenariat | ‚úÖ                | ‚úÖ                  | ‚úÖ               | ‚úÖ       |
| Direction               | ‚úÖ                | ‚úÖ                  | ‚úÖ               | ‚úÖ       |
| Enseignant / R√©f√©rent   | üîç               | ‚ùå                  | üîç              | üîç      |

---

## üîå Int√©grations

* **Module 25** : Gestion des stages et immersions.
* **Module 10** : Gestion documentaire pour l‚Äôarchivage de conventions.
* **Module 20** : Lien avec √©v√©nements scolaires.
* **Module 14** : Indicateurs sur les r√©sultats des partenariats.

---

## üì§ API REST (exemples)

* `POST /api/partenaires` ‚Äî Ajouter un nouveau partenaire.
* `POST /api/conventions` ‚Äî Cr√©er une convention de partenariat.
* `GET /api/partenaires/:id/activites` ‚Äî Liste des activit√©s par partenaire.
* `PUT /api/conventions/:id/renouveler` ‚Äî Mise √† jour d‚Äôune convention.

---

## üí° √âvolutions possibles

* Int√©gration d‚Äôun **portail partenaire** pour d√©p√¥t de documents, rapports ou suivi de collaboration.
* Automatisation des alertes de **renouvellement de convention**.
* **Notation/√©valuation des partenaires** selon impact p√©dagogique.

---
Voici la **sp√©cification compl√®te du Module 28 : Gestion des √©valuations de la qualit√© p√©dagogique et des inspections**, destin√©e √† garantir le suivi et l‚Äôam√©lioration continue des pratiques √©ducatives au sein de l‚Äô√©tablissement.

---

# üìò Module 28 : √âvaluations de la qualit√© p√©dagogique et inspections

---

## üéØ Objectifs

* √âvaluer r√©guli√®rement la qualit√© de l‚Äôenseignement dispens√©.
* Permettre aux responsables p√©dagogiques ou inspecteurs de r√©aliser des visites, observations ou audits.
* Fournir des outils de remont√©e, d‚Äôanalyse et de suivi des performances p√©dagogiques et institutionnelles.
* Garantir une am√©lioration continue bas√©e sur des donn√©es qualitatives et quantitatives.

---

## üß± 1. Planification des inspections et √©valuations

### üìå Fonctionnalit√©s

* Cr√©ation de sessions d‚Äô√©valuation :

  * Nom, type (interne, externe), date de d√©but/fin.
  * Objectif : audit p√©dagogique, contr√¥le administratif, visite d‚Äôinspection‚Ä¶
* Affectation des inspecteurs, des classes/enseignants concern√©s.

### üóÉÔ∏è Table SQL : `evaluations_pedagogiques`

```sql
CREATE TABLE evaluations_pedagogiques (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(255) NOT NULL,
  type_evaluation VARCHAR(100), -- "Inspection externe", "Audit interne", etc.
  description TEXT,
  date_debut DATE,
  date_fin DATE,
  statut VARCHAR(50) DEFAULT 'Planifi√©e', -- Planifi√©e, En cours, Cl√¥tur√©e
  responsable_id INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üßæ 2. Crit√®res d‚Äô√©valuation et grilles personnalisables

### üìå Fonctionnalit√©s

* Cr√©ation d‚Äôune grille d‚Äô√©valuation personnalis√©e par type d‚Äô√©valuation :

  * Exemples de crit√®res : pr√©paration des cours, gestion de classe, p√©dagogie active, respect du programme, suivi des √©l√®ves, etc.
  * Pond√©ration et notation (ex. sur 5, 10 ou 20).
* Cat√©gorisation des crit√®res : p√©dagogie, environnement, administratif, relationnel‚Ä¶

### üóÉÔ∏è Table SQL : `criteres_evaluation`

```sql
CREATE TABLE criteres_evaluation (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(255),
  categorie VARCHAR(100), -- "P√©dagogie", "Organisation", ...
  description TEXT,
  note_max INTEGER DEFAULT 10,
  actif BOOLEAN DEFAULT true
);
```

### üóÉÔ∏è Table SQL : `grilles_evaluation`

```sql
CREATE TABLE grilles_evaluation (
  id SERIAL PRIMARY KEY,
  evaluation_id INTEGER REFERENCES evaluations_pedagogiques(id),
  critere_id INTEGER REFERENCES criteres_evaluation(id),
  note_obtenue INTEGER,
  commentaire TEXT
);
```

---

## üìä 3. Observation en classe / rapport d‚Äô√©valuation

### üìå Fonctionnalit√©s

* Saisie d‚Äôobservations qualitatives lors d‚Äôune s√©ance d‚Äôobservation.
* Attribution de notes par crit√®re, commentaires associ√©s.
* G√©n√©ration de rapport PDF automatiquement.

### üóÉÔ∏è Table SQL : `observations_evaluation`

```sql
CREATE TABLE observations_evaluation (
  id SERIAL PRIMARY KEY,
  evaluation_id INTEGER REFERENCES evaluations_pedagogiques(id),
  enseignant_id INTEGER REFERENCES enseignants(id),
  classe_id INTEGER REFERENCES classes(id),
  date_observation DATE,
  synthese TEXT,
  recommandation TEXT,
  rapport_pdf VARCHAR(255),
  cree_par INTEGER REFERENCES utilisateurs(id),
  date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üìà 4. Suivi, statistiques & recommandations

* Moyenne par crit√®re, par enseignant, par classe ou niveau.
* √âvolution des performances par p√©riode.
* Liste des recommandations √©mises par inspection.
* Historique des inspections avec statut (am√©lioration, stagnation, r√©gression).

---

## üîê R√¥les et acc√®s

| R√¥le                     | Cr√©er √©valuation | Noter crit√®res | R√©diger rapport | Lire synth√®se |
| ------------------------ | ---------------- | -------------- | --------------- | ------------- |
| Inspecteur / Superviseur | ‚úÖ                | ‚úÖ              | ‚úÖ               | ‚úÖ             |
| Responsable p√©dagogique  | ‚úÖ                | ‚úÖ              | ‚úÖ               | ‚úÖ             |
| Enseignant concern√©      | ‚ùå                | ‚ùå              | ‚ùå               | ‚úÖ (partiel)   |

---

## üîÅ Int√©grations possibles

* **Module 4** : Lien avec les enseignants et les emplois du temps.
* **Module 14** : G√©n√©ration de graphiques de performance p√©dagogique.
* **Module 23** : Journalisation des inspections dans l‚Äôaudit p√©dagogique.
* **Module 17** : Utilisation de rapports dans le tableau de bord p√©dagogique.

---

## üì§ API REST (exemples)

* `POST /api/evaluations` ‚Äî Cr√©er une √©valuation.
* `GET /api/evaluations/:id/rapport` ‚Äî R√©cup√©rer le rapport PDF.
* `POST /api/evaluations/:id/criteres` ‚Äî Associer les crit√®res d‚Äôune grille.
* `POST /api/observations` ‚Äî Enregistrer une s√©ance d‚Äôobservation.

---

## üí° √âvolutions possibles

* **√âvaluation √† 360¬∞** : auto-√©valuation par l‚Äôenseignant, avis des √©l√®ves, etc.
* **Int√©gration mobile** : application d√©di√©e aux inspections (formulaire mobile offline).
* **Alertes automatiques** pour les enseignants sous-√©valu√©s ou non inspect√©s depuis longtemps.

---

Voici la **sp√©cification d√©taill√©e du Module 29 : Gestion des enseignants vacataires ou √† temps partiel**, pens√©e pour les √©tablissements souhaitant encadrer et suivre efficacement les collaborateurs non permanents.

---

# üìò Module 29 : Gestion des enseignants vacataires ou √† temps partiel

---

## üéØ Objectifs

* G√©rer distinctement les enseignants non permanents (vacataires ou √† temps partiel).
* Suivre leurs interventions, disponibilit√©s, contrats et paiements.
* Permettre une int√©gration souple dans les emplois du temps et dans la paie.
* Assurer le respect des engagements contractuels tout en facilitant l‚Äôadministration.

---

## üß± 1. Identification et profil des enseignants vacataires

### üìå Fonctionnalit√©s

* Ajout de vacataires via un formulaire d√©di√© ou import Excel.
* Informations cl√©s :

  * Identit√©, coordonn√©es, dipl√¥mes
  * Sp√©cialit√©s, mati√®res autoris√©es √† enseigner
  * Type de contrat (vacation, temps partiel), dur√©e, nombre d‚Äôheures pr√©vu

### üóÉÔ∏è Table SQL : `enseignants_vacataires`

```sql
CREATE TABLE enseignants_vacataires (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100),
  prenom VARCHAR(100),
  email VARCHAR(150) UNIQUE,
  telephone VARCHAR(20),
  adresse TEXT,
  date_naissance DATE,
  specialites TEXT,
  date_debut_contrat DATE,
  date_fin_contrat DATE,
  type_contrat VARCHAR(50), -- 'vacataire', 'temps partiel'
  heures_contractuelles INTEGER,
  actif BOOLEAN DEFAULT TRUE,
  cree_le TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üßæ 2. Affectation aux classes et mati√®res

### üìå Fonctionnalit√©s

* Affecter un vacataire √† des mati√®res pr√©cises sur des cr√©neaux d√©finis.
* Limiter l‚Äôaffectation en fonction des heures contractuelles restantes.
* Visualiser son emploi du temps distinctement des permanents.

### üóÉÔ∏è Table SQL : `affectations_vacataires`

```sql
CREATE TABLE affectations_vacataires (
  id SERIAL PRIMARY KEY,
  vacataire_id INTEGER REFERENCES enseignants_vacataires(id),
  classe_id INTEGER REFERENCES classes(id),
  matiere_id INTEGER REFERENCES matieres(id),
  nb_heures_semaine INTEGER,
  date_affectation DATE,
  commentaire TEXT
);
```

---

## üìä 3. Suivi des interventions

### üìå Fonctionnalit√©s

* Pointage des s√©ances r√©ellement effectu√©es (par le vacataire ou un admin).
* Saisie automatique via emploi du temps ou manuelle.
* Calcul du total d‚Äôheures effectu√©es par mois / p√©riode.

### üóÉÔ∏è Table SQL : `interventions_vacataires`

```sql
CREATE TABLE interventions_vacataires (
  id SERIAL PRIMARY KEY,
  vacataire_id INTEGER REFERENCES enseignants_vacataires(id),
  classe_id INTEGER REFERENCES classes(id),
  matiere_id INTEGER REFERENCES matieres(id),
  date_seance DATE,
  duree_heures NUMERIC(4,2),
  statut VARCHAR(20) DEFAULT 'valid√©e', -- valid√©e, annul√©e, non d√©clar√©e
  remarque TEXT
);
```

---

## üí∞ 4. Paiement et g√©n√©ration des fiches d‚Äô√©margement

### üìå Fonctionnalit√©s

* G√©n√©ration automatique d‚Äôune fiche mensuelle :

  * Heures pr√©vues vs heures effectu√©es
  * Montant brut √† payer (tarif horaire configurable)
* Export PDF de la fiche d‚Äô√©margement
* Historique des paiements

### üóÉÔ∏è Table SQL : `paiements_vacataires`

```sql
CREATE TABLE paiements_vacataires (
  id SERIAL PRIMARY KEY,
  vacataire_id INTEGER REFERENCES enseignants_vacataires(id),
  mois VARCHAR(7), -- '2025-05'
  heures_total NUMERIC(5,2),
  tarif_horaire NUMERIC(6,2),
  montant_brut NUMERIC(10,2),
  statut_paiement VARCHAR(50) DEFAULT 'en attente', -- pay√©, en attente
  date_paiement DATE,
  fiche_pdf VARCHAR(255)
);
```

---

## üßë‚Äçüíº 5. Gestion administrative & alertes

### üìå Fonctionnalit√©s

* Alertes automatiques √† l‚Äôapproche de la fin de contrat.
* Rappel si heures maximales d√©pass√©es.
* Tableau de bord listant les vacataires en activit√©, inactifs, ou termin√©s.
* T√©l√©versement de contrats, CV, dipl√¥mes.

---

## üîê R√¥les et acc√®s

| R√¥le                      | Ajout vacataire | Affectation | Pointage | Paiement | Lecture fiches |
| ------------------------- | --------------- | ----------- | -------- | -------- | -------------- |
| Responsable RH            | ‚úÖ               | ‚úÖ           | ‚ùå        | ‚úÖ        | ‚úÖ              |
| Responsable p√©dagogique   | ‚úÖ               | ‚úÖ           | ‚úÖ        | ‚ùå        | ‚úÖ              |
| Vacataire (compte r√©duit) | ‚ùå               | ‚ùå           | ‚úÖ        | ‚ùå        | ‚úÖ (lecture)    |

---

## üîÅ Int√©grations possibles

* **Module 4** : Emploi du temps et mati√®res.
* **Module 7** : Comptabilit√©, paie, g√©n√©ration de bulletins de paie.
* **Module 14** : Statistiques sur l'engagement vacataire / performance.
* **Module 18** : Remplacement d‚Äôenseignant par vacataire automatiquement.

---

## üì§ API REST (exemples)

* `POST /api/vacataires` ‚Äî Cr√©er un vacataire.
* `POST /api/vacataires/:id/affectations` ‚Äî Affecter un vacataire.
* `GET /api/vacataires/:id/interventions` ‚Äî Suivre les cours donn√©s.
* `GET /api/vacataires/:id/fiche-emargement` ‚Äî G√©n√©rer le PDF de fiche d'√©margement.

---

## üìå Am√©liorations possibles

* Signature √©lectronique de contrat et fiche d‚Äô√©margement.
* Application mobile simplifi√©e pour vacataires : emploi du temps + pointage.
* Int√©gration avec paie automatis√©e via plateforme tierce (ex : SAGE, QuickBooks...).

---
Voici la **sp√©cification compl√®te du Module 30 : Gestion des examens officiels (BEPC, BAC, CEP, etc.)**, con√ßu pour r√©pondre aux exigences des √©tablissements confront√©s aux examens nationaux ou officiels, en suivant les standards du syst√®me √©ducatif camerounais, fran√ßais ou mixte.

---

# üìò Module 30 : Gestion des examens officiels (BEPC, BAC, CEP, etc.)

---

## üéØ Objectifs

* G√©rer le processus de pr√©paration, d‚Äôinscription, de convocation, de suivi et de r√©sultats des examens officiels.
* Centraliser les informations requises pour les jurys, centres d‚Äôexamen, documents administratifs, et r√©sultats officiels.
* Assurer la conformit√© avec les organismes d‚Äô√âtat (ex : MINESEC, MEN, Rectorats‚Ä¶).

---

## üß± 1. Gestion des types d'examens

### üìå Fonctionnalit√©s

* Cr√©ation de types d‚Äôexamens (BEPC, BAC, CEP, Probatoire, etc.)
* Association √† un niveau scolaire
* Configuration des mati√®res concern√©es, coefficients, seuils d‚Äôadmission

### üóÉÔ∏è Table SQL : `examens_officiels`

```sql
CREATE TABLE examens_officiels (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100),
  niveau_scolaire_id INTEGER REFERENCES niveaux_scolaires(id),
  annee_scolaire VARCHAR(9),
  session VARCHAR(20), -- Juin 2025, Ao√ªt 2025, etc.
  date_examen DATE,
  centre_examen VARCHAR(100),
  cree_le TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## üßæ 2. Inscription des candidats √† l‚Äôexamen

### üìå Fonctionnalit√©s

* S√©lection des √©l√®ves admissibles
* Ajout automatique depuis les classes d'examen (ex : 3e, Terminale)
* G√©n√©ration de la fiche d‚Äôinscription officielle

### üóÉÔ∏è Table SQL : `candidats_examens`

```sql
CREATE TABLE candidats_examens (
  id SERIAL PRIMARY KEY,
  eleve_id INTEGER REFERENCES eleves(id),
  examen_id INTEGER REFERENCES examens_officiels(id),
  numero_inscription VARCHAR(50) UNIQUE,
  statut_inscription VARCHAR(20) DEFAULT 'enregistr√©', -- valid√©, en attente
  dossier_complet BOOLEAN DEFAULT FALSE,
  observation TEXT
);
```

---

## üìÑ 3. Convocations et documents officiels

### üìå Fonctionnalit√©s

* G√©n√©ration automatique :

  * Fiches individuelles
  * Convocations (avec centre, salle, horaires)
  * Liste nominative des candidats par centre
* T√©l√©versement de pi√®ces jointes

---

## üß™ 4. Gestion des √©preuves

### üìå Fonctionnalit√©s

* D√©finition des √©preuves de chaque examen
* Planning des √©preuves (date, heure, dur√©e)
* Affectation des enseignants surveillants

### üóÉÔ∏è Table SQL : `epreuves_examens`

```sql
CREATE TABLE epreuves_examens (
  id SERIAL PRIMARY KEY,
  examen_id INTEGER REFERENCES examens_officiels(id),
  matiere_id INTEGER REFERENCES matieres(id),
  date_epreuve DATE,
  heure_debut TIME,
  duree_minutes INTEGER,
  salle_examen VARCHAR(50),
  coefficient INTEGER
);
```

---

## üìù 5. Saisie des notes d‚Äôexamen

### üìå Fonctionnalit√©s

* Interface s√©curis√©e de saisie des notes
* Possibilit√© d‚Äôimport CSV
* Calcul automatique de moyenne finale et mention

### üóÉÔ∏è Table SQL : `notes_examens`

```sql
CREATE TABLE notes_examens (
  id SERIAL PRIMARY KEY,
  candidat_id INTEGER REFERENCES candidats_examens(id),
  epreuve_id INTEGER REFERENCES epreuves_examens(id),
  note NUMERIC(5,2),
  valide BOOLEAN DEFAULT FALSE,
  remarque TEXT
);
```

---

## üìä 6. R√©sultats et statistiques

### üìå Fonctionnalit√©s

* Calcul automatis√© des moyennes g√©n√©rales
* Attribution de mentions (Passable, Bien, Tr√®s bien, √âchec)
* G√©n√©ration :

  * Liste des admis / recal√©s
  * Statistiques par mati√®re, par sexe, par centre
* Export PDF / Excel des r√©sultats officiels

### üóÉÔ∏è Table SQL : `resultats_examens`

```sql
CREATE TABLE resultats_examens (
  id SERIAL PRIMARY KEY,
  candidat_id INTEGER REFERENCES candidats_examens(id),
  moyenne_finale NUMERIC(5,2),
  mention VARCHAR(50),
  decision_finale VARCHAR(20), -- admis, recal√©
  date_resultat DATE
);
```

---

## üì¶ 7. Suivi administratif

### üìå Fonctionnalit√©s

* Archivage de toutes les sessions d'examen
* Dossiers de chaque candidat par ann√©e
* Export complet du dossier de chaque √©l√®ve

---

## üîê R√¥les et autorisations

| R√¥le                    | Cr√©er examen | G√©rer candidats | Saisir notes | Valider r√©sultats | G√©n√©rer documents |
| ----------------------- | ------------ | --------------- | ------------ | ----------------- | ----------------- |
| Admin                   | ‚úÖ            | ‚úÖ               | ‚ùå            | ‚úÖ                 | ‚úÖ                 |
| Responsable p√©dagogique | ‚úÖ            | ‚úÖ               | ‚úÖ            | ‚ùå                 | ‚úÖ                 |
| Jury (compte restreint) | ‚ùå            | ‚ùå               | ‚úÖ            | ‚ùå                 | ‚ùå                 |

---

## üîÅ Int√©grations

* **Module 2** : R√©cup√©ration des √©l√®ves de classe d‚Äôexamen.
* **Module 5 / 8** : Recoupement entre bulletin et note d‚Äôexamen.
* **Module 14** : Statistiques d‚Äôexamen officielles.
* **Module 25** : Suivi des candidats en stage apr√®s obtention du dipl√¥me.

---

## üì§ API REST (exemples)

* `POST /api/examens` ‚Äî Cr√©er un examen officiel.
* `POST /api/examens/:id/candidats` ‚Äî Ajouter des √©l√®ves √† l‚Äôexamen.
* `POST /api/notes-examens` ‚Äî Saisie ou import de notes.
* `GET /api/examens/:id/resultats` ‚Äî G√©n√©rer liste d‚Äôadmis.

---

## üìå Extensions possibles

* T√©l√©versement des r√©sultats depuis fichiers officiels (ex : Excel fourni par le minist√®re)
* Signature √©lectronique des proc√®s-verbaux d'examen
* Synchronisation automatique avec une plateforme minist√©rielle via API

---
Voici la sp√©cification du **Module 31 : Gestion de la formation continue des enseignants et interface personnalis√©e pour les parents**, divis√© en deux sous-parties compl√©mentaires mais ind√©pendantes si besoin.

---

# üìò Module 31 : Formation continue des enseignants & Interface parent personnalis√©e

---

## üéØ Objectifs

* **C√¥t√© enseignant** : Permettre la planification, le suivi et la validation des formations continues obligatoires ou optionnelles, avec journal de comp√©tences.
* **C√¥t√© parent** : Offrir un espace personnalis√© d‚Äôacc√®s aux informations scolaires de leurs enfants (r√©sultats, emploi du temps, rendez-vous, messages, documents...).

---

## üß© PARTIE 1 : Formation continue des enseignants

---

### üìå Fonctionnalit√©s

1. **Cr√©ation et planification des formations**

   * D√©finition des th√®mes, objectifs, dur√©e, formateurs
   * Programmation des dates, lieux ou format (pr√©sentiel / en ligne)

2. **Inscription et suivi des enseignants**

   * Inscription manuelle ou auto selon profils
   * Suivi des pr√©sences et validations

3. **√âvaluation post-formation**

   * Questionnaire ou √©valuation √† chaud / froid
   * Attestation automatique (PDF)

4. **Journal individuel de formation**

   * Historique des formations suivies
   * Comp√©tences acquises ou mises √† jour
   * G√©n√©ration de rapport par enseignant

---

### üóÉÔ∏è Tables SQL principales

```sql
CREATE TABLE formations (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(150),
  description TEXT,
  date_debut DATE,
  date_fin DATE,
  format VARCHAR(20), -- Pr√©sentiel, En ligne
  lieu VARCHAR(150),
  formateur VARCHAR(100),
  statut VARCHAR(20) DEFAULT 'pr√©vu' -- pr√©vu, termin√©, annul√©
);

CREATE TABLE participation_formations (
  id SERIAL PRIMARY KEY,
  formation_id INTEGER REFERENCES formations(id),
  enseignant_id INTEGER REFERENCES enseignants(id),
  present BOOLEAN DEFAULT FALSE,
  evaluation_note NUMERIC(3,1),
  attestation_url TEXT
);
```

---

### üîó Int√©grations

* **Module 4** : pour g√©rer les enseignants.
* **Module 14** : statistiques sur le d√©veloppement professionnel.
* **Module 29** : gestion sp√©cifique des vacataires et temporaires.

---

## üß© PARTIE 2 : Interface parent personnalis√©e

---

### üìå Fonctionnalit√©s

1. **Connexion et s√©curit√©**

   * Acc√®s parent par identifiants li√©s √† l‚Äô√©l√®ve
   * Vue multi-enfants si parent de plusieurs √©l√®ves

2. **Tableau de bord**

   * R√©sum√© des moyennes, bulletins, absences
   * Notifications r√©centes et messages

3. **Acc√®s rapide aux modules suivants** :

   * üìä Bulletins et √©valuations
   * üìÖ Emploi du temps
   * üìÇ Documents transmis
   * üßæ Paiements et factures
   * üì¨ Messagerie avec l‚Äô√©tablissement
   * üìã Rendez-vous (parents-profs, r√©unions, etc.)

4. **Param√©trage de pr√©f√©rences**

   * Choix du canal de communication (email, SMS, app)
   * Langue de l‚Äôinterface (FR / EN)

---

### üóÉÔ∏è Tables SQL principales

```sql
CREATE TABLE parents (
  id SERIAL PRIMARY KEY,
  nom VARCHAR(100),
  prenom VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  telephone VARCHAR(20),
  mot_de_passe TEXT,
  langue_preferee VARCHAR(10) DEFAULT 'FR'
);

CREATE TABLE parent_eleve (
  id SERIAL PRIMARY KEY,
  parent_id INTEGER REFERENCES parents(id),
  eleve_id INTEGER REFERENCES eleves(id)
);
```

---

### üîó Int√©grations

* **Module 1** : r√©cup√©ration des informations des √©l√®ves.
* **Modules 5, 6, 7, 8, 14** : agr√©gation des donn√©es affich√©es.
* **Module 9** : notifications personnalis√©es.

---

## üì§ API REST (exemples)

* `GET /api/enseignants/:id/formations` ‚Äì Voir formations suivies
* `POST /api/formations/:id/inscription` ‚Äì Inscrire un enseignant
* `GET /api/parents/:id/enfants` ‚Äì Lister enfants du parent
* `GET /api/parents/:id/dashboard` ‚Äì R√©cup√©rer tableau de bord

---

## üîê R√¥les et autorisations

| Action                           | Admin | Enseignant | Parent |
| -------------------------------- | ----- | ---------- | ------ |
| Cr√©er/√©diter formations          | ‚úÖ     | ‚ùå          | ‚ùå      |
| S‚Äôinscrire √† une formation       | ‚ùå     | ‚úÖ          | ‚ùå      |
| Voir historique de formation     | ‚úÖ     | ‚úÖ          | ‚ùå      |
| Acc√©der aux notes / bulletins    | ‚ùå     | ‚ùå          | ‚úÖ      |
| Consulter emploi du temps enfant | ‚ùå     | ‚ùå          | ‚úÖ      |
| Param√©trer notifications         | ‚úÖ     | ‚úÖ          | ‚úÖ      |

---

## üìå Extensions possibles

* G√©n√©ration automatique des rapports de formation pour inspections acad√©miques
* Application mobile parent / enseignant d√©di√©e
* Int√©gration visioconf√©rence (Zoom, Meet) pour formations
* Alerte sur formations obligatoires √† venir

---
Voici la fiche d√©taill√©e du **Module 32 : Gestion des projets communautaires ou de d√©veloppement durable**, int√©gr√© dans un syst√®me scolaire moderne et citoyen.

---

# üå± **Module 32 : Gestion des projets communautaires / d√©veloppement durable**

---

## üéØ Objectifs

* Favoriser la participation active des √©l√®ves, enseignants et partenaires √† des projets √† impact (√©cologie, solidarit√©, innovation sociale, d√©veloppement local...).
* Permettre une gestion structur√©e des projets : planification, suivi, collaboration, √©valuation d'impact.
* Valoriser les actions sociales de l‚Äô√©tablissement scolaire.

---

## üîß Fonctionnalit√©s principales

### 1. **Cr√©ation et gestion des projets**

* Nom, description, objectifs, domaine (√©cologie, inclusion, √©ducation, sant√©, etc.)
* Dates de d√©but/fin
* √âtat du projet (Planifi√©, En cours, Termin√©, Suspendu)
* Pi√®ces jointes (budget, planning, fiches, affiches...)

### 2. **Affectation des participants**

* √âl√®ves (groupes ou individuels)
* Enseignants encadrants
* Intervenants externes (ONG, mairie, partenaires...)
* Suivi des r√¥les et responsabilit√©s

### 3. **Planification des √©tapes du projet**

* T√¢ches d√©finies par jalons (activit√©s, interventions, r√©unions, √©v√©nements)
* Calendrier int√©gr√© / notifications automatiques
* Suivi de l‚Äô√©tat d‚Äôavancement

### 4. **Suivi des r√©sultats et indicateurs**

* Objectifs atteints
* Mesures d‚Äôimpact (indicateurs d√©finis par projet)
* Bilan (texte, visuel, PDF g√©n√©r√©)
* Publication possible sur le site de l‚Äô√©cole

### 5. **Valorisation p√©dagogique**

* Attribution de cr√©dits ou d‚Äôappr√©ciations aux √©l√®ves participants
* Int√©gration au livret scolaire ou au bulletin (si voulu)
* Suivi individuel ou par groupe

---

## üóÉÔ∏è Mod√®le de base de donn√©es (SQL)

```sql
CREATE TABLE projets_communautaires (
  id SERIAL PRIMARY KEY,
  titre VARCHAR(150),
  description TEXT,
  domaine VARCHAR(100), -- ex: "√âcologie", "Solidarit√©", "Innovation"
  date_debut DATE,
  date_fin DATE,
  etat VARCHAR(20) DEFAULT 'Planifi√©', -- En cours, Termin√©, Suspendu
  fichier_support TEXT,
  bilan_url TEXT
);

CREATE TABLE participants_projet (
  id SERIAL PRIMARY KEY,
  projet_id INTEGER REFERENCES projets_communautaires(id),
  type_participant VARCHAR(20), -- 'eleve', 'enseignant', 'partenaire'
  participant_id INTEGER, -- ID dynamique selon type
  role VARCHAR(100)
);

CREATE TABLE jalons_projet (
  id SERIAL PRIMARY KEY,
  projet_id INTEGER REFERENCES projets_communautaires(id),
  nom VARCHAR(100),
  description TEXT,
  date_prevue DATE,
  statut VARCHAR(20) DEFAULT '√Ä faire' -- √Ä faire, En cours, Termin√©
);

CREATE TABLE indicateurs_projet (
  id SERIAL PRIMARY KEY,
  projet_id INTEGER REFERENCES projets_communautaires(id),
  nom VARCHAR(100),
  valeur_attendue TEXT,
  valeur_reelle TEXT,
  unite VARCHAR(20)
);
```

---

## üß† Exemples de projets

* **Potager scolaire durable**
* **Campagne de sensibilisation √† l'hygi√®ne**
* **Tri s√©lectif dans l‚Äô√©tablissement**
* **Ateliers num√©riques interg√©n√©rationnels**
* **Journ√©es de solidarit√© (orphelinat, h√¥pital, village voisin)**

---

## üìä API REST ‚Äì exemples

* `GET /api/projets` : Liste des projets
* `POST /api/projets` : Cr√©er un projet
* `PUT /api/projets/:id` : Modifier un projet
* `POST /api/projets/:id/participants` : Ajouter un √©l√®ve/enseignant
* `GET /api/projets/:id/indicateurs` : Voir les indicateurs
* `POST /api/projets/:id/jalons` : Ajouter une √©tape

---

## üîê Droits d'acc√®s et r√¥les

| Action                            | Admin | Enseignant | √âl√®ve |
| --------------------------------- | ----- | ---------- | ----- |
| Cr√©er/modifier un projet          | ‚úÖ     | ‚úÖ          | ‚ùå     |
| √ätre affect√© √† un projet          | ‚úÖ     | ‚úÖ          | ‚úÖ     |
| Suivre l‚Äôavancement et les √©tapes | ‚úÖ     | ‚úÖ          | ‚úÖ     |
| Ajouter des jalons ou indicateurs | ‚úÖ     | ‚úÖ          | ‚ùå     |
| Consulter les r√©sultats           | ‚úÖ     | ‚úÖ          | ‚úÖ     |

---

## üìé Int√©grations possibles

* **Module 4** : Enseignants impliqu√©s
* **Module 2** : √âl√®ves participants
* **Module 14** : Tableau de bord avec indicateurs sociaux / √©coresponsables
* **Module 22** : Clubs et projets transversaux
* **Module 25** : Pr√©paration aux stages ou concours

---

## üìå Extensions futures

* Int√©gration avec les r√©seaux sociaux ou le site de l‚Äô√©cole pour publier les r√©sultats
* Suivi budg√©taire plus avanc√© pour les grands projets
* Syst√®me de vote ou d‚Äô√©valuation des projets par les √©l√®ves ou le public
* Gamification : badges / troph√©es attribu√©s aux √©l√®ves

---































